"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.claimTeeRewards = exports.claimTeeRewardsTx = exports.submitMetricsServerReport = exports.submitMetricsServerReportTx = void 0;
var blockchain_1 = require("../blockchain");
var constants_1 = require("../constants");
var events_1 = require("../events");
/**
 * @name submitMetricsServerReportTx
 * @summary                         Creates an unsigned unsubmitted Submit Metrics Server Report Transaction Hash for an Era.
 * @param operatorAddress           The operator address to which submitted scores belongs.
 * @param metricsServerReport       The report containing the 5 scores computed for the mentioned era and the submitter's registered address.
 * @returns                         Unsigned unsubmitted Submit Metrics Server Report Transaction Hash. The Hash is only valid for 5 minutes.
 */
var submitMetricsServerReportTx = function (operatorAddress, metricsServerReport) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.createTxHex)(constants_1.txPallets.tee, constants_1.txActions.submitMetricsServerReport, [operatorAddress, metricsServerReport])];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.submitMetricsServerReportTx = submitMetricsServerReportTx;
/**
 * @name submitMetricsServerReport
 * @summary                         Submit the metrics server report for a specific era.
 * @param operatorAddress           The operator address to which submitted scores belongs.
 * @param metricsServerReport       The report containing the 5 scores computed for the mentioned era and the submitter's registered address.
 * @param keyring                   Account that will sign the transaction.
 * @param waitUntil                 Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns                         MetricsServerReportSubmittedEvent Blockchain event.
 */
var submitMetricsServerReport = function (operatorAddress, metricsServerReport, keyring, waitUntil) { return __awaiter(void 0, void 0, void 0, function () {
    var tx, events;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.submitMetricsServerReportTx)(operatorAddress, metricsServerReport)];
            case 1:
                tx = _a.sent();
                return [4 /*yield*/, (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring)];
            case 2:
                events = (_a.sent()).events;
                return [2 /*return*/, events.findEventOrThrow(events_1.MetricsServerReportSubmittedEvent)];
        }
    });
}); };
exports.submitMetricsServerReport = submitMetricsServerReport;
/**
 * @name claimTeeRewardsTx
 * @summary                         Creates an unsigned unsubmitted Claim Tee Rewards Transaction Hash for an Era.
 * @param era                       The era to claim the rewards.
 * @returns                         Unsigned unsubmitted Claim Tee Rewards Transaction Hash. The Hash is only valid for 5 minutes.
 */
var claimTeeRewardsTx = function (era) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.createTxHex)(constants_1.txPallets.tee, constants_1.txActions.claimRewards, [era])];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.claimTeeRewardsTx = claimTeeRewardsTx;
/**
 * @name claimTeeRewards
 * @summary                         Claim the operator reward for a specific era.
 * @param era                       The era to claim the rewards.
 * @param keyring                   Account that will sign the transaction.
 * @param waitUntil                 Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns                         RewardsClaimedEvent Blockchain event.
 */
var claimTeeRewards = function (era, keyring, waitUntil) { return __awaiter(void 0, void 0, void 0, function () {
    var tx, events;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.claimTeeRewardsTx)(era)];
            case 1:
                tx = _a.sent();
                return [4 /*yield*/, (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring)];
            case 2:
                events = (_a.sent()).events;
                return [2 /*return*/, events.findEventOrThrow(events_1.RewardsClaimedEvent)];
        }
    });
}); };
exports.claimTeeRewards = claimTeeRewards;
