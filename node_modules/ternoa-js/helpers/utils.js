"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ensureHttps = exports.retryPost = exports.removeURLSlash = exports.roundBalance = exports.formatPermill = exports.convertFileToBuffer = void 0;
var bn_js_1 = __importDefault(require("bn.js"));
var buffer_1 = require("buffer");
var blockchain_1 = require("../blockchain");
var constants_1 = require("../constants");
/**
 * @name convertFileToBuffer
 * @summary                 Converts a File to Buffer.
 * @param file              File to convert.
 * @returns                 A Buffer.
 */
var convertFileToBuffer = function (file) { return __awaiter(void 0, void 0, void 0, function () {
    var arrayBuffer, buffer;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, file.arrayBuffer()];
            case 1:
                arrayBuffer = _a.sent();
                buffer = buffer_1.Buffer.from(arrayBuffer);
                return [2 /*return*/, buffer];
        }
    });
}); };
exports.convertFileToBuffer = convertFileToBuffer;
/**
 * @name formatPermill
 * @summary         Checks that percent is in range 0 to 100 and format to permill.
 * @param percent   Number in range from 0 to 100 with max 4 decimals.
 * @returns         The formated percent in permill format.
 */
var formatPermill = function (percent) {
    if (percent > 100 || percent < 0) {
        throw new Error(constants_1.Errors.MUST_BE_PERCENTAGE);
    }
    return parseFloat(percent.toFixed(4)) * 10000;
};
exports.formatPermill = formatPermill;
var roundBalance = function (amount) {
    return Number((0, blockchain_1.balanceToNumber)(new bn_js_1.default(amount), { forceUnit: "-", withUnit: false }).split(",").join(""));
};
exports.roundBalance = roundBalance;
var removeURLSlash = function (url) {
    if (url.length === 0)
        return url;
    var lastChar = url.charAt(url.length - 1);
    if (lastChar === "/") {
        return url.slice(0, -1);
    }
    else {
        return url;
    }
};
exports.removeURLSlash = removeURLSlash;
var retryPost = function (fn, n) { return __awaiter(void 0, void 0, void 0, function () {
    var lastError, i, err_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                i = 0;
                _a.label = 1;
            case 1:
                if (!(i < n)) return [3 /*break*/, 6];
                _a.label = 2;
            case 2:
                _a.trys.push([2, 4, , 5]);
                return [4 /*yield*/, fn()];
            case 3: return [2 /*return*/, _a.sent()];
            case 4:
                err_1 = _a.sent();
                lastError = {
                    isRetryError: true,
                    status: "SDK_RETRY_POST_ERROR",
                    message: (err_1 === null || err_1 === void 0 ? void 0 : err_1.message) ? err_1.message : JSON.stringify(err_1),
                };
                return [3 /*break*/, 5];
            case 5:
                i++;
                return [3 /*break*/, 1];
            case 6: return [2 /*return*/, lastError];
        }
    });
}); };
exports.retryPost = retryPost;
var ensureHttps = function (url) {
    if (!url)
        throw new Error(constants_1.Errors.URL_UNDEFINED);
    if (url.indexOf("https://") === 0)
        return url;
    else if (url.indexOf("http://") === 0)
        return url.replace("http://", "https://");
    else
        return "https://" + url;
};
exports.ensureHttps = ensureHttps;
