"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLastBlock = exports.getSignatureFromExtension = exports.getSignatureFromKeyring = void 0;
var util_1 = require("@polkadot/util");
var blockchain_1 = require("../blockchain");
var buffer_1 = require("buffer");
/**
 * @name getSignatureFromKeyring
 * @summary         Signs data using the keyring.
 * @param keyring   Account that will sign the data.
 * @param data      Data to be signed.
 * @returns         Hex value of the signed data.
 */
var getSignatureFromKeyring = function (keyring, data) {
    var finalData = new Uint8Array(buffer_1.Buffer.from(data));
    return (0, util_1.u8aToHex)(keyring.sign(finalData));
};
exports.getSignatureFromKeyring = getSignatureFromKeyring;
/**
 * @name getSignatureFromExtension
 * @summary                 Signs data using an injector extension. We recommand Polkadot extention.
 * @param signerAddress     Account address that will sign the data.
 * @param injectorExtension The signer method retrived from your extension: object must have a signer key.
 * @param data              Data to be signed.
 * @returns                 Hex value of the signed data.
 */
var getSignatureFromExtension = function (signerAddress, injectorExtension, data) { return __awaiter(void 0, void 0, void 0, function () {
    var signature, api;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!(injectorExtension && "signer" in injectorExtension && injectorExtension.signer.signRaw)) return [3 /*break*/, 2];
                return [4 /*yield*/, injectorExtension.signer.signRaw({
                        address: signerAddress,
                        data: data,
                        type: "payload",
                    })];
            case 1:
                signature = (_a.sent()).signature;
                return [2 /*return*/, signature];
            case 2:
                if (!(injectorExtension && "signer" in injectorExtension)) return [3 /*break*/, 4];
                api = (0, blockchain_1.getRawApi)();
                return [4 /*yield*/, api.sign(signerAddress, {
                        data: data,
                    }, { signer: injectorExtension.signer })];
            case 3: return [2 /*return*/, _a.sent()];
            case 4: return [2 /*return*/];
        }
    });
}); };
exports.getSignatureFromExtension = getSignatureFromExtension;
/**
 * @name getLastBlock
 * @summary         Retrieve the last block number.
 * @returns         The last Block id (a number).
 */
var getLastBlock = function () { return __awaiter(void 0, void 0, void 0, function () {
    var api, lastBlockHash, lastBlock, lastBlockId;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                api = (0, blockchain_1.getRawApi)();
                return [4 /*yield*/, api.rpc.chain.getFinalizedHead()];
            case 1:
                lastBlockHash = _a.sent();
                return [4 /*yield*/, api.rpc.chain.getBlock(lastBlockHash)];
            case 2:
                lastBlock = _a.sent();
                lastBlockId = Number(lastBlock.block.header.number.toString());
                return [2 /*return*/, lastBlockId];
        }
    });
}); };
exports.getLastBlock = getLastBlock;
