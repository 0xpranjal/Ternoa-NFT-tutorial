"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCollectionData = exports.getNftData = exports.getNextCollectionId = exports.getNextNftId = exports.getCapsuleOffchainData = exports.getSecretNftOffchainData = exports.getCapsuleMintFee = exports.getSecretNftMintFee = exports.getNftMintFee = void 0;
var util_1 = require("@polkadot/util");
var blockchain_1 = require("../blockchain");
var constants_1 = require("../constants");
/**
 * @name nftMintFee
 * @summary Fee to mint an NFT (extra fee on top of the tx fees).
 * @returns NFT mint fee.
 */
var getNftMintFee = function () { return __awaiter(void 0, void 0, void 0, function () {
    var fee;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.query)(constants_1.txPallets.nft, constants_1.chainQuery.nftMintFee)];
            case 1:
                fee = _a.sent();
                return [2 /*return*/, fee];
        }
    });
}); };
exports.getNftMintFee = getNftMintFee;
/**
 * @name getSecretNftMintFee
 * @summary Fee to mint a secret NFT (extra fee on top of the tx fees and basic nft).
 * @returns Secret NFT mint fee.
 */
var getSecretNftMintFee = function () { return __awaiter(void 0, void 0, void 0, function () {
    var fee;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.query)(constants_1.txPallets.nft, constants_1.chainQuery.secretNftMintFee)];
            case 1:
                fee = _a.sent();
                return [2 /*return*/, fee];
        }
    });
}); };
exports.getSecretNftMintFee = getSecretNftMintFee;
/**
 * @name getCapsuleMintFee
 * @summary Fee to mint a Capsule. (extra fee on top of the tx fees).
 * @returns Capsule NFT mint fee.
 */
var getCapsuleMintFee = function () { return __awaiter(void 0, void 0, void 0, function () {
    var fee;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.query)(constants_1.txPallets.nft, constants_1.chainQuery.capsuleMintFee)];
            case 1:
                fee = _a.sent();
                return [2 /*return*/, fee];
        }
    });
}); };
exports.getCapsuleMintFee = getCapsuleMintFee;
/**
 * @name getSecretNftOffchainData
 * @summary Get the secret offchain data of a Secret NFT.
 * @returns Secret NFT secret offchain data.
 */
var getSecretNftOffchainData = function (nftId) { return __awaiter(void 0, void 0, void 0, function () {
    var secretOffchainData;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.query)(constants_1.txPallets.nft, constants_1.chainQuery.secretNftsOffchainData, [nftId])];
            case 1:
                secretOffchainData = _a.sent();
                return [2 /*return*/, secretOffchainData.toHuman()];
        }
    });
}); };
exports.getSecretNftOffchainData = getSecretNftOffchainData;
/**
 * @name getCapsuleOffchainData
 * @summary Get the capsule offchain data.
 * @returns The capsule offchain data.
 */
var getCapsuleOffchainData = function (nftId) { return __awaiter(void 0, void 0, void 0, function () {
    var capsuleOffchainData;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.query)(constants_1.txPallets.nft, constants_1.chainQuery.capsuleOffchainData, [nftId])];
            case 1:
                capsuleOffchainData = _a.sent();
                return [2 /*return*/, capsuleOffchainData.toHuman()];
        }
    });
}); };
exports.getCapsuleOffchainData = getCapsuleOffchainData;
/**
 * @name getNextNftId
 * @summary Get the next NFT Id available.
 * @returns Number.
 */
var getNextNftId = function () { return __awaiter(void 0, void 0, void 0, function () {
    var id;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.query)(constants_1.txPallets.nft, constants_1.chainQuery.nextNFTId)];
            case 1:
                id = _a.sent();
                return [2 /*return*/, id.toNumber()];
        }
    });
}); };
exports.getNextNftId = getNextNftId;
/**
 * @name getNextCollectionId
 * @summary Get the next collection Id available.
 * @returns Number.
 */
var getNextCollectionId = function () { return __awaiter(void 0, void 0, void 0, function () {
    var id;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.query)(constants_1.txPallets.nft, constants_1.chainQuery.nextCollectionId)];
            case 1:
                id = _a.sent();
                return [2 /*return*/, id.toNumber()];
        }
    });
}); };
exports.getNextCollectionId = getNextCollectionId;
/**
 * @name getNftData
 * @summary       Provides the data related to one NFT.
 * @param nftId   The NFT id.
 * @returns       A JSON object with the NFT data. ex:{owner, creator, offchainData, (...)}
 */
var getNftData = function (nftId) { return __awaiter(void 0, void 0, void 0, function () {
    var data, result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.query)(constants_1.txPallets.nft, constants_1.chainQuery.nfts, [nftId])];
            case 1:
                data = _a.sent();
                if (data.isEmpty == true) {
                    return [2 /*return*/, null];
                }
                try {
                    result = data.toJSON();
                    // The offchainData is an hexadecimal string, we convert it to a human readable string.
                    if (result.offchainData)
                        result.offchainData = (0, util_1.hexToString)(result.offchainData);
                    return [2 /*return*/, result];
                }
                catch (error) {
                    throw new Error("".concat(constants_1.Errors.NFT_CONVERSION_ERROR));
                }
                return [2 /*return*/];
        }
    });
}); };
exports.getNftData = getNftData;
/**
 * @name getCollectionData
 * @summary             Provides the data related to one NFT collection. ex:{owner, creator, offchainData, limit, isClosed(...)}
 * @param collectionId  The collection id.
 * @returns             A JSON object with data of a single NFT collection.
 */
var getCollectionData = function (collectionId) { return __awaiter(void 0, void 0, void 0, function () {
    var data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.query)(constants_1.txPallets.nft, constants_1.chainQuery.collections, [collectionId])];
            case 1:
                data = _a.sent();
                if (data.isEmpty == true) {
                    return [2 /*return*/, null];
                }
                try {
                    return [2 /*return*/, data.toJSON()];
                }
                catch (error) {
                    throw new Error("".concat(constants_1.Errors.COLLECTION_CONVERSION_ERROR));
                }
                return [2 /*return*/];
        }
    });
}); };
exports.getCollectionData = getCollectionData;
