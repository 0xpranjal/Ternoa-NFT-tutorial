"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.balancesTransferKeepAlive = exports.balancesTransferKeepAliveTx = exports.balancesTransferAll = exports.balancesTransferAllTx = exports.balancesTransfer = exports.balancesTransferTx = void 0;
var blockchain_1 = require("../blockchain");
var constants_1 = require("../constants");
var events_1 = require("../events");
/**
 * @name balancesTransferTx
 * @summary             Creates an unsigned unsubmitted Balance-Transfert Transaction Hash.
 * @param to            Public address of the account to transfer the amount to.
 * @param amount        Token amount to transfer.
 * @returns             Unsigned unsubmitted Balance-Transfert Transaction Hash. The Hash is only valid for 5 minutes.
 */
var balancesTransferTx = function (to, amount) { return __awaiter(void 0, void 0, void 0, function () {
    var formattedAmount;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                formattedAmount = typeof amount === "number" ? (0, blockchain_1.numberToBalance)(amount) : amount;
                return [4 /*yield*/, (0, blockchain_1.createTxHex)(constants_1.txPallets.balances, constants_1.txActions.transfer, [to, formattedAmount])];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.balancesTransferTx = balancesTransferTx;
/**
 * @name balancesTransfer
 * @summary             Transfers some liquid free balance to another account.
 * @param to            Public address of the account to transfer the amount to.
 * @param amount        Token amount to transfer.
 * @param keyring       Account that will sign the transaction.
 * @param waitUntil     Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns             BalancesTransferEvent Blockchain event.
 */
var balancesTransfer = function (to, amount, keyring, waitUntil) { return __awaiter(void 0, void 0, void 0, function () {
    var tx, events;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.balancesTransferTx)(to, amount)];
            case 1:
                tx = _a.sent();
                return [4 /*yield*/, (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring)];
            case 2:
                events = (_a.sent()).events;
                return [2 /*return*/, events.findEventOrThrow(events_1.BalancesTransferEvent)];
        }
    });
}); };
exports.balancesTransfer = balancesTransfer;
/**
 * @name balancesTransferAllTx
 * @summary             Creates an unsigned unsubmitted Balance-TransfertAll Transaction Hash.
 * @param to            Public address of the account to transfer the amount to.
 * @param keepAlive     Ensure that the transfer does not kill the account, it retains the Existential Deposit.
 * @returns             Unsigned unsubmitted Balance-TransfertAll Transaction Hash. The Hash is only valid for 5 minutes.
 */
var balancesTransferAllTx = function (to, keepAlive) {
    if (keepAlive === void 0) { keepAlive = true; }
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, blockchain_1.createTxHex)(constants_1.txPallets.balances, constants_1.txActions.transferAll, [to, keepAlive])];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
};
exports.balancesTransferAllTx = balancesTransferAllTx;
/**
 * @name balancesTransferAll
 * @summary             Transfers the entire transferable balance from the caller account.
 * @param to            Public address of the account to transfer the amount to.
 * @param keepAlive     Ensure that the transfer does not kill the account, it retains the Existential Deposit.
 * @param keyring       Account that will sign the transaction.
 * @param waitUntil     Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns             BalancesTransferEvent Blockchain event.
 */
var balancesTransferAll = function (to, keepAlive, keyring, waitUntil) {
    if (keepAlive === void 0) { keepAlive = true; }
    return __awaiter(void 0, void 0, void 0, function () {
        var tx, events;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, exports.balancesTransferAllTx)(to, keepAlive)];
                case 1:
                    tx = _a.sent();
                    return [4 /*yield*/, (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring)];
                case 2:
                    events = (_a.sent()).events;
                    return [2 /*return*/, events.findEventOrThrow(events_1.BalancesTransferEvent)];
            }
        });
    });
};
exports.balancesTransferAll = balancesTransferAll;
/**
 * @name balancesTransferKeepAliveTx
 * @summary             Creates an unsigned unsubmitted Balance-TransfertKeepAlive Transaction Hash.
 * @param to            Public address of the account to transfer the amount to.
 * @param amount        Token amount to transfer.
 * @returns             Unsigned unsubmitted Balance-TransfertKeepAlive Transaction Hash. The Hash is only valid for 5 minutes.
 */
var balancesTransferKeepAliveTx = function (to, amount) { return __awaiter(void 0, void 0, void 0, function () {
    var formattedAmount;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                formattedAmount = typeof amount === "number" ? (0, blockchain_1.numberToBalance)(amount) : amount;
                return [4 /*yield*/, (0, blockchain_1.createTxHex)(constants_1.txPallets.balances, constants_1.txActions.transferKeepAlive, [to, formattedAmount])];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.balancesTransferKeepAliveTx = balancesTransferKeepAliveTx;
/**
 * @name balancesTransferKeepAlive
 * @summary             Transfers some liquid free balance to another account with a check that the transfer will not kill the origin account.
 * @param to            Public address of the account to transfer the amount to.
 * @param amount        Token amount to transfer.
 * @param keyring       Account that will sign the transaction.
 * @param waitUntil     Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns             BalancesTransferEvent Blockchain event.
 */
var balancesTransferKeepAlive = function (to, amount, keyring, waitUntil) { return __awaiter(void 0, void 0, void 0, function () {
    var tx, events;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.balancesTransferKeepAliveTx)(to, amount)];
            case 1:
                tx = _a.sent();
                return [4 /*yield*/, (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring)];
            case 2:
                events = (_a.sent()).events;
                return [2 /*return*/, events.findEventOrThrow(events_1.BalancesTransferEvent)];
        }
    });
}); };
exports.balancesTransferKeepAlive = balancesTransferKeepAlive;
