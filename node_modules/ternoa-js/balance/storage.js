"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkBalanceForTransfer = exports.getTransferrableBalance = exports.getTotalBalance = exports.getBalances = void 0;
var constants_1 = require("../constants");
var blockchain_1 = require("../blockchain");
/**
 * @name getBalances
 * @summary             Get the balances of an account including free, reserved, miscFrozen and feeFrozen balances as well as the total.
 * @param address       Public address of the account to get balances.
 * @returns             The balances of the account.
 */
var getBalances = function (address) { return __awaiter(void 0, void 0, void 0, function () {
    var balances;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.query)(constants_1.txPallets.system, constants_1.chainQuery.account, [address])];
            case 1:
                balances = (_a.sent()).data;
                return [2 /*return*/, balances];
        }
    });
}); };
exports.getBalances = getBalances;
/**
 * @name getTotalBalance
 * @summary             Get the total balance of an account (free & reserve balances)
 * @param address       Public address of the account to get total balance for.
 * @returns             The total balance of an account (free & reserve balances)
 */
var getTotalBalance = function (address) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, free, reserved;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, (0, exports.getBalances)(address)];
            case 1:
                _a = _b.sent(), free = _a.free, reserved = _a.reserved;
                return [2 /*return*/, free.add(reserved)];
        }
    });
}); };
exports.getTotalBalance = getTotalBalance;
/**
 * @name getTransferrableBalance
 * @summary             Get the transferrable balance of an account.
 * @param address       Public address of the account to get transferrable balance for.
 * @returns             The transferrable balance of an account.
 */
var getTransferrableBalance = function (address) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, feeFrozen, free, miscFrozen, frozen;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, (0, exports.getBalances)(address)];
            case 1:
                _a = _b.sent(), feeFrozen = _a.feeFrozen, free = _a.free, miscFrozen = _a.miscFrozen;
                if (feeFrozen.gt(miscFrozen)) {
                    frozen = feeFrozen;
                }
                else {
                    frozen = miscFrozen;
                }
                return [2 /*return*/, free.sub(frozen)];
        }
    });
}); };
exports.getTransferrableBalance = getTransferrableBalance;
/**
 * @name checkBalanceForTransfer
 * @summary             Check if an account as enough funds to ensure a transfer.
 * @param address       Public address of the account to check balance for transfer.
 * @param value         Token amount to check before transfer.
 */
var checkBalanceForTransfer = function (address, value) { return __awaiter(void 0, void 0, void 0, function () {
    var amount, free;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                amount = typeof value === "number" ? (0, blockchain_1.numberToBalance)(value) : value;
                return [4 /*yield*/, (0, exports.getBalances)(address)];
            case 1:
                free = (_a.sent()).free;
                return [2 /*return*/, free.gt(amount)];
        }
    });
}); };
exports.checkBalanceForTransfer = checkBalanceForTransfer;
