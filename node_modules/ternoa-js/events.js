"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NFTUnlistedEvent = exports.NFTListedEvent = exports.MarketplaceMintFeeSetEvent = exports.MarketplaceKindSetEvent = exports.MarketplaceOwnerSetEvent = exports.MarketplaceConfigSetEvent = exports.MarketplaceCreatedEvent = exports.ContractExpiredEvent = exports.ContractSubscriptionPeriodStartedEvent = exports.ContractEndedEvent = exports.ContractSubscriptionTermsAcceptedEvent = exports.ContractSubscriptionTermsChangedEvent = exports.ContractOfferRetractedEvent = exports.ContractOfferCreatedEvent = exports.ContractRevokedEvent = exports.ContractStartedEvent = exports.ContractCanceledEvent = exports.ContractCreatedEvent = exports.RewardsClaimedEvent = exports.MetricsServerReportSubmittedEvent = exports.TransmittedEvent = exports.ThresholdReachedEvent = exports.ConsentAddedEvent = exports.TimerResetEvent = exports.ProtocolRemovedEvent = exports.ProtocolSetEvent = exports.CapsuleRevertedEvent = exports.CapsuleKeyUpdateNotifiedEvent = exports.CapsuleOffchainDataSetEvent = exports.NFTConvertedToCapsuleEvent = exports.CollectionOffchainDataSetEvent = exports.CollectionBurnedEvent = exports.CollectionClosedEvent = exports.CollectionLimitedEvent = exports.CollectionCreatedEvent = exports.NFTAddedToCollectionEvent = exports.NFTTransferredEvent = exports.NFTRoyaltySetEvent = exports.NFTDelegatedEvent = exports.NFTBurnedEvent = exports.SecretAddedToNFTEvent = exports.NFTCreatedEvent = exports.TreasuryDepositEvent = exports.BalancesEndowedEvent = exports.BalancesTransferEvent = exports.BalancesDepositEvent = exports.BalancesWithdrawEvent = exports.AssetTransferredEvent = exports.BlockchainEvent = exports.EventType = void 0;
exports.BlockchainEvents = exports.UnknownEvent = exports.NewAccountEvent = exports.ExtrinsicSuccessEvent = exports.ExtrinsicFailedEvent = exports.BatchCompletedEvent = exports.BatchCompletedWithErrorsEvent = exports.BatchInterruptedEvent = exports.ItemFailedEvent = exports.ItemCompletedEvent = exports.BalanceClaimedEvent = exports.BidRemovedEvent = exports.BidAddedEvent = exports.AuctionCompletedEvent = exports.AuctionCancelledEvent = exports.AuctionCreatedEvent = exports.NFTSoldEvent = void 0;
var bn_js_1 = __importDefault(require("bn.js"));
var util_1 = require("@polkadot/util");
var constants_1 = require("./constants");
var utils_1 = require("./helpers/utils");
var enum_1 = require("./marketplace/enum");
var enum_2 = require("./rent/enum");
var EventType;
(function (EventType) {
    //Assets
    EventType["AssetTransferred"] = "assets.Transferred";
    // Balances
    EventType["BalancesWithdraw"] = "balances.Withdraw";
    EventType["BalancesDeposit"] = "balances.Deposit";
    EventType["BalancesTransfer"] = "balances.Transfer";
    EventType["BalancesEndowed"] = "balances.Endowed";
    // Treasury
    EventType["TreasuryDeposit"] = "treasury.Deposit";
    // NFT
    EventType["NFTCreated"] = "nft.NFTCreated";
    EventType["SecretAddedToNFT"] = "nft.SecretAddedToNFT";
    EventType["NFTBurned"] = "nft.NFTBurned";
    EventType["NFTDelegated"] = "nft.NFTDelegated";
    EventType["NFTRoyaltySet"] = "nft.NFTRoyaltySet";
    EventType["NFTTransferred"] = "nft.NFTTransferred";
    EventType["NFTAddedToCollection"] = "nft.NFTAddedToCollection";
    // NFT Capsule
    EventType["NFTConvertedToCapsule"] = "nft.NFTConvertedToCapsule";
    EventType["CapsuleOffchainDataSet"] = "nft.CapsuleOffchainDataSet";
    EventType["CapsuleKeyUpdateNotified"] = "nft.CapsuleKeyUpdateNotified";
    EventType["CapsuleReverted"] = "nft.CapsuleReverted";
    // NFT Collections
    EventType["CollectionCreated"] = "nft.CollectionCreated";
    EventType["CollectionLimited"] = "nft.CollectionLimited";
    EventType["CollectionClosed"] = "nft.CollectionClosed";
    EventType["CollectionBurned"] = "nft.CollectionBurned";
    EventType["CollectionOffchainDataSet"] = "nft.CollectionOffchainDataSet";
    //Transmission Protocols
    EventType["ProtocolSet"] = "transmissionProtocols.ProtocolSet";
    EventType["ProtocolRemoved"] = "transmissionProtocols.ProtocolRemoved";
    EventType["TimerReset"] = "transmissionProtocols.TimerReset";
    EventType["ConsentAdded"] = "transmissionProtocols.ConsentAdded";
    EventType["ThresholdReached"] = "transmissionProtocols.ThresholdReached";
    EventType["Transmitted"] = "transmissionProtocols.Transmitted";
    //Rent
    EventType["ContractCreated"] = "rent.ContractCreated";
    EventType["ContractStarted"] = "rent.ContractStarted";
    EventType["ContractRevoked"] = "rent.ContractRevoked";
    EventType["ContractOfferCreated"] = "rent.ContractOfferCreated";
    EventType["ContractOfferRetracted"] = "rent.ContractOfferRetracted";
    EventType["ContractSubscriptionTermsChanged"] = "rent.ContractSubscriptionTermsChanged";
    EventType["ContractSubscriptionTermsAccepted"] = "rent.ContractSubscriptionTermsAccepted";
    EventType["ContractEnded"] = "rent.ContractEnded";
    EventType["ContractSubscriptionPeriodStarted"] = "rent.ContractSubscriptionPeriodStarted";
    EventType["ContractExpired"] = "rent.ContractExpired";
    EventType["ContractCanceled"] = "rent.ContractCanceled";
    // Marketplace
    EventType["MarketplaceCreated"] = "marketplace.MarketplaceCreated";
    EventType["MarketplaceOwnerSet"] = "marketplace.MarketplaceOwnerSet";
    EventType["MarketplaceKindSet"] = "marketplace.MarketplaceKindSet";
    EventType["MarketplaceConfigSet"] = "marketplace.MarketplaceConfigSet";
    EventType["MarketplaceMintFeeSet"] = "marketplace.MarketplaceMintFeeSet";
    EventType["NFTListed"] = "marketplace.NFTListed";
    EventType["NFTUnlisted"] = "marketplace.NFTUnlisted";
    EventType["NFTSold"] = "marketplace.NFTSold";
    // Auctions
    EventType["AuctionCreated"] = "auction.AuctionCreated";
    EventType["AuctionCancelled"] = "auction.AuctionCancelled";
    EventType["AuctionCompleted"] = "auction.AuctionCompleted";
    EventType["BidAdded"] = "auction.BidAdded";
    EventType["BidRemoved"] = "auction.BidRemoved";
    EventType["BalanceClaimed"] = "auction.BalanceClaimed";
    // Utility
    EventType["ItemFailed"] = "utility.ItemFailed";
    EventType["ItemCompleted"] = "utility.ItemCompleted";
    EventType["BatchInterrupted"] = "utility.BatchInterrupted";
    EventType["BatchCompletedWithErrors"] = "utility.BatchCompletedWithErrors";
    EventType["BatchCompleted"] = "utility.BatchCompleted";
    // System
    EventType["ExtrinsicFailed"] = "system.ExtrinsicFailed";
    EventType["ExtrinsicSuccess"] = "system.ExtrinsicSuccess";
    EventType["NewAccount"] = "system.NewAccount";
    // Tee
    EventType["MetricsServerReportSubmitted"] = "tee.MetricsServerReportSubmitted";
    EventType["RewardsClaimed"] = "tee.RewardsClaimed";
    // Unknown
    EventType["Unknown"] = "Unknown";
})(EventType || (exports.EventType = EventType = {}));
var BlockchainEvent = /** @class */ (function () {
    function BlockchainEvent(raw, type) {
        this.raw = raw;
        this.type = type;
        this.section = raw.section;
        this.method = raw.method;
    }
    BlockchainEvent.fromEvent = function (event) {
        var name = event.section + "." + event.method;
        switch (name) {
            // Assets
            case EventType.AssetTransferred:
                return new AssetTransferredEvent(event);
            // Balances
            case EventType.BalancesWithdraw:
                return new BalancesWithdrawEvent(event);
            case EventType.BalancesDeposit:
                return new BalancesDepositEvent(event);
            case EventType.BalancesTransfer:
                return new BalancesTransferEvent(event);
            case EventType.BalancesEndowed:
                return new BalancesEndowedEvent(event);
            // Treasury
            case EventType.TreasuryDeposit:
                return new TreasuryDepositEvent(event);
            // NFT
            case EventType.NFTCreated:
                return new NFTCreatedEvent(event);
            case EventType.SecretAddedToNFT:
                return new SecretAddedToNFTEvent(event);
            case EventType.NFTBurned:
                return new NFTBurnedEvent(event);
            case EventType.NFTDelegated:
                return new NFTDelegatedEvent(event);
            case EventType.NFTRoyaltySet:
                return new NFTRoyaltySetEvent(event);
            case EventType.NFTTransferred:
                return new NFTTransferredEvent(event);
            case EventType.NFTAddedToCollection:
                return new NFTAddedToCollectionEvent(event);
            case EventType.CollectionCreated:
                return new CollectionCreatedEvent(event);
            case EventType.CollectionLimited:
                return new CollectionLimitedEvent(event);
            case EventType.CollectionClosed:
                return new CollectionClosedEvent(event);
            case EventType.CollectionBurned:
                return new CollectionBurnedEvent(event);
            case EventType.CollectionOffchainDataSet:
                return new CollectionOffchainDataSetEvent(event);
            // Capsule
            case EventType.NFTConvertedToCapsule:
                return new NFTConvertedToCapsuleEvent(event);
            case EventType.CapsuleOffchainDataSet:
                return new CapsuleOffchainDataSetEvent(event);
            case EventType.CapsuleKeyUpdateNotified:
                return new CapsuleKeyUpdateNotifiedEvent(event);
            case EventType.CapsuleReverted:
                return new CapsuleRevertedEvent(event);
            // Transmission Protocols
            case EventType.ProtocolSet:
                return new ProtocolSetEvent(event);
            case EventType.ProtocolRemoved:
                return new ProtocolRemovedEvent(event);
            case EventType.TimerReset:
                return new TimerResetEvent(event);
            case EventType.ConsentAdded:
                return new ConsentAddedEvent(event);
            case EventType.ThresholdReached:
                return new ThresholdReachedEvent(event);
            case EventType.Transmitted:
                return new TransmittedEvent(event);
            // Tee
            case EventType.MetricsServerReportSubmitted:
                return new MetricsServerReportSubmittedEvent(event);
            case EventType.RewardsClaimed:
                return new RewardsClaimedEvent(event);
            // Rent
            case EventType.ContractCreated:
                return new ContractCreatedEvent(event);
            case EventType.ContractCanceled:
                return new ContractCanceledEvent(event);
            case EventType.ContractStarted:
                return new ContractStartedEvent(event);
            case EventType.ContractRevoked:
                return new ContractRevokedEvent(event);
            case EventType.ContractOfferCreated:
                return new ContractOfferCreatedEvent(event);
            case EventType.ContractOfferRetracted:
                return new ContractOfferRetractedEvent(event);
            case EventType.ContractSubscriptionTermsChanged:
                return new ContractSubscriptionTermsChangedEvent(event);
            case EventType.ContractSubscriptionTermsAccepted:
                return new ContractSubscriptionTermsAcceptedEvent(event);
            case EventType.ContractEnded:
                return new ContractEndedEvent(event);
            case EventType.ContractSubscriptionPeriodStarted:
                return new ContractSubscriptionPeriodStartedEvent(event);
            case EventType.ContractExpired:
                return new ContractExpiredEvent(event);
            // Marketplace
            case EventType.MarketplaceCreated:
                return new MarketplaceCreatedEvent(event);
            case EventType.MarketplaceOwnerSet:
                return new MarketplaceOwnerSetEvent(event);
            case EventType.MarketplaceKindSet:
                return new MarketplaceKindSetEvent(event);
            case EventType.MarketplaceConfigSet:
                return new MarketplaceConfigSetEvent(event);
            case EventType.MarketplaceMintFeeSet:
                return new MarketplaceMintFeeSetEvent(event);
            case EventType.NFTListed:
                return new NFTListedEvent(event);
            case EventType.NFTUnlisted:
                return new NFTUnlistedEvent(event);
            case EventType.NFTSold:
                return new NFTSoldEvent(event);
            // Auctions
            case EventType.AuctionCreated:
                return new AuctionCreatedEvent(event);
            case EventType.AuctionCancelled:
                return new AuctionCancelledEvent(event);
            case EventType.AuctionCompleted:
                return new AuctionCompletedEvent(event);
            case EventType.BidAdded:
                return new BidAddedEvent(event);
            case EventType.BidRemoved:
                return new BidRemovedEvent(event);
            case EventType.BalanceClaimed:
                return new BalanceClaimedEvent(event);
            // Utility
            case EventType.ItemCompleted:
                return new ItemCompletedEvent(event);
            case EventType.ItemFailed:
                return new ItemFailedEvent(event);
            case EventType.BatchInterrupted:
                return new BatchInterruptedEvent(event);
            case EventType.BatchCompletedWithErrors:
                return new BatchCompletedWithErrorsEvent(event);
            case EventType.BatchCompleted:
                return new BatchCompletedEvent(event);
            // System
            case EventType.ExtrinsicFailed:
                return new ExtrinsicFailedEvent(event);
            case EventType.ExtrinsicSuccess:
                return new ExtrinsicSuccessEvent(event);
            case EventType.NewAccount:
                return new NewAccountEvent(event);
        }
        return new UnknownEvent(event);
    };
    return BlockchainEvent;
}());
exports.BlockchainEvent = BlockchainEvent;
/**
 * This class represents the on-chain AssetTransferredEvent event.
 */
var AssetTransferredEvent = /** @class */ (function (_super) {
    __extends(AssetTransferredEvent, _super);
    /**
     * Construct the data object from the AssetTransferredEvent event
     * @param event The AssetTransferredEvent event
     */
    function AssetTransferredEvent(event) {
        var _this = _super.call(this, event, EventType.AssetTransferred) || this;
        var _a = event.data, assetId = _a[0], from = _a[1], to = _a[2], amount = _a[3];
        _this.assetId = Number.parseInt(assetId.toString());
        _this.from = from.toString();
        _this.to = to.toString();
        _this.amount = (0, util_1.bnToBn)(amount.toString()).toString();
        _this.amountRounded = (0, utils_1.roundBalance)(_this.amount);
        return _this;
    }
    return AssetTransferredEvent;
}(BlockchainEvent));
exports.AssetTransferredEvent = AssetTransferredEvent;
/**
 * This class represents the on-chain BalancesWithdrawEvent event.
 */
var BalancesWithdrawEvent = /** @class */ (function (_super) {
    __extends(BalancesWithdrawEvent, _super);
    /**
     * Construct the data object from the BalancesWithdrawEvent event
     * @param event The BalancesWithdrawEvent event
     */
    function BalancesWithdrawEvent(event) {
        var _this = _super.call(this, event, EventType.BalancesWithdraw) || this;
        _this.who = event.data[0].toString();
        _this.amount = event.data[1].toString();
        _this.amountRounded = (0, utils_1.roundBalance)(_this.amount);
        return _this;
    }
    return BalancesWithdrawEvent;
}(BlockchainEvent));
exports.BalancesWithdrawEvent = BalancesWithdrawEvent;
/**
 * This class represents the on-chain BalancesDepositEvent event.
 */
var BalancesDepositEvent = /** @class */ (function (_super) {
    __extends(BalancesDepositEvent, _super);
    /**
     * Construct the data object from the BalancesDepositEvent event
     * @param event The BalancesDepositEvent event
     */
    function BalancesDepositEvent(event) {
        var _this = _super.call(this, event, EventType.BalancesDeposit) || this;
        var _a = event.data, who = _a[0], amount = _a[1];
        _this.who = who.toString();
        _this.amount = amount.toString();
        _this.amountRounded = (0, utils_1.roundBalance)(_this.amount);
        return _this;
    }
    return BalancesDepositEvent;
}(BlockchainEvent));
exports.BalancesDepositEvent = BalancesDepositEvent;
/**
 * This class represents the on-chain BalancesTransferEvent event.
 */
var BalancesTransferEvent = /** @class */ (function (_super) {
    __extends(BalancesTransferEvent, _super);
    /**
     * Construct the data object from the BalancesTransferEvent event
     * @param event The BalancesTransferEvent event
     */
    function BalancesTransferEvent(event) {
        var _this = _super.call(this, event, EventType.BalancesTransfer) || this;
        var _a = event.data, from = _a[0], to = _a[1], amount = _a[2];
        _this.from = from.toString();
        _this.to = to.toString();
        _this.amount = amount.toString();
        _this.amountRounded = (0, utils_1.roundBalance)(_this.amount);
        return _this;
    }
    return BalancesTransferEvent;
}(BlockchainEvent));
exports.BalancesTransferEvent = BalancesTransferEvent;
/**
 *  This class represents the on-chain BalancesEndowedEvent event.
 */
var BalancesEndowedEvent = /** @class */ (function (_super) {
    __extends(BalancesEndowedEvent, _super);
    /**
     * Construct the data object from the BalancesEndowedEvent event
     * @param event The BalancesEndowedEvent event
     */
    function BalancesEndowedEvent(event) {
        var _this = _super.call(this, event, EventType.BalancesEndowed) || this;
        var _a = event.data, account = _a[0], freeBalance = _a[1];
        _this.account = account.toString();
        _this.freeBalance = freeBalance.toString();
        _this.freeBalanceRounded = (0, utils_1.roundBalance)(_this.freeBalance);
        return _this;
    }
    return BalancesEndowedEvent;
}(BlockchainEvent));
exports.BalancesEndowedEvent = BalancesEndowedEvent;
/**
 * This class represents the on-chain TreasuryDepositEvent event.
 */
var TreasuryDepositEvent = /** @class */ (function (_super) {
    __extends(TreasuryDepositEvent, _super);
    /**
     * Construct the data object the TreasuryDepositEvent event
     * @param event The TreasuryDepositEvent event
     */
    function TreasuryDepositEvent(event) {
        var _this = _super.call(this, event, EventType.TreasuryDeposit) || this;
        var value = event.data[0];
        _this.value = value.toString();
        _this.valueRounded = (0, utils_1.roundBalance)(_this.value);
        return _this;
    }
    return TreasuryDepositEvent;
}(BlockchainEvent));
exports.TreasuryDepositEvent = TreasuryDepositEvent;
/**
 * This class represents the on-chain NFTCreatedEvent event.
 */
var NFTCreatedEvent = /** @class */ (function (_super) {
    __extends(NFTCreatedEvent, _super);
    /**
     * Construct the data object from the NFTCreatedEvent event
     * @param event The NFTCreatedEvent event
     */
    function NFTCreatedEvent(event) {
        var _this = _super.call(this, event, EventType.NFTCreated) || this;
        var _a = event.data, nftId = _a[0], owner = _a[1], offchainData = _a[2], royalty = _a[3], collectionId = _a[4], isSoulbound = _a[5], mintFee = _a[6];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.owner = owner.toString();
        _this.royalty = Number.parseInt(royalty.toString()) / 10000;
        _this.collectionId = Number.parseInt(collectionId.toString()) || null;
        _this.isSoulbound = isSoulbound.toString() === "true";
        _this.offchainData = (0, util_1.hexToString)(offchainData.toString());
        _this.mintFee = mintFee.toString();
        _this.mintFeeRounded = (0, utils_1.roundBalance)(_this.mintFee);
        return _this;
    }
    return NFTCreatedEvent;
}(BlockchainEvent));
exports.NFTCreatedEvent = NFTCreatedEvent;
var SecretAddedToNFTEvent = /** @class */ (function (_super) {
    __extends(SecretAddedToNFTEvent, _super);
    /**
     * Construct the data object from the SecretAddedToNFTEvent event
     * @param event The SecretAddedToNFTEvent event
     */
    function SecretAddedToNFTEvent(event) {
        var _this = _super.call(this, event, EventType.SecretAddedToNFT) || this;
        var _a = event.data, nftId = _a[0], offchainData = _a[1];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.offchainData = (0, util_1.hexToString)(offchainData.toString());
        return _this;
    }
    return SecretAddedToNFTEvent;
}(BlockchainEvent));
exports.SecretAddedToNFTEvent = SecretAddedToNFTEvent;
/**
 * This class represents the on-chain NFTBurnedEvent event.
 */
var NFTBurnedEvent = /** @class */ (function (_super) {
    __extends(NFTBurnedEvent, _super);
    /**
     * Construct the data object from the NFTBurnedEvent event
     * @param event The NFTBurnedEvent event
     */
    function NFTBurnedEvent(event) {
        var _this = _super.call(this, event, EventType.NFTBurned) || this;
        var nftId = event.data[0];
        _this.nftId = Number.parseInt(nftId.toString());
        return _this;
    }
    return NFTBurnedEvent;
}(BlockchainEvent));
exports.NFTBurnedEvent = NFTBurnedEvent;
/**
 * This class represents the on-chain NFTDelegatedEvent event.
 */
var NFTDelegatedEvent = /** @class */ (function (_super) {
    __extends(NFTDelegatedEvent, _super);
    /**
     * Construct the data object from the NFTDelegatedEvent event
     * @param event The NFTDelegatedEvent event
     */
    function NFTDelegatedEvent(event) {
        var _this = _super.call(this, event, EventType.NFTDelegated) || this;
        var _a = event.data, nftId = _a[0], recipient = _a[1];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.recipient = (recipient === null || recipient === void 0 ? void 0 : recipient.toString()) || null;
        return _this;
    }
    return NFTDelegatedEvent;
}(BlockchainEvent));
exports.NFTDelegatedEvent = NFTDelegatedEvent;
/**
 * This class represents the on-chain NFTRoyaltySetEvent event.
 */
var NFTRoyaltySetEvent = /** @class */ (function (_super) {
    __extends(NFTRoyaltySetEvent, _super);
    /**
     * Construct the data object from the NFTRoyaltySetEvent event
     * @param event The NFTRoyaltySetEvent event
     */
    function NFTRoyaltySetEvent(event) {
        var _this = _super.call(this, event, EventType.NFTRoyaltySet) || this;
        var _a = event.data, nftId = _a[0], royalty = _a[1];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.royalty = Number.parseInt(royalty.toString()) / 10000;
        return _this;
    }
    return NFTRoyaltySetEvent;
}(BlockchainEvent));
exports.NFTRoyaltySetEvent = NFTRoyaltySetEvent;
/**
 * This class represents the on-chain NFTTransferredEvent event.
 */
var NFTTransferredEvent = /** @class */ (function (_super) {
    __extends(NFTTransferredEvent, _super);
    /**
     * Construct the data object from the NFTTransferredEvent event
     * @param event The NFTTransferredEvent event
     */
    function NFTTransferredEvent(event) {
        var _this = _super.call(this, event, EventType.NFTTransferred) || this;
        var _a = event.data, nftId = _a[0], sender = _a[1], recipient = _a[2];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.sender = sender.toString();
        _this.recipient = recipient.toString();
        return _this;
    }
    return NFTTransferredEvent;
}(BlockchainEvent));
exports.NFTTransferredEvent = NFTTransferredEvent;
/**
 * This class represents the on-chain NFTAddedToCollectionEvent event.
 */
var NFTAddedToCollectionEvent = /** @class */ (function (_super) {
    __extends(NFTAddedToCollectionEvent, _super);
    /**
     * Construct the data object from the NFTAddedToCollectionEvent event
     * @param event The NFTAddedToCollectionEvent event
     */
    function NFTAddedToCollectionEvent(event) {
        var _this = _super.call(this, event, EventType.NFTAddedToCollection) || this;
        var _a = event.data, nftId = _a[0], collectionId = _a[1];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.collectionId = Number.parseInt(collectionId.toString());
        return _this;
    }
    return NFTAddedToCollectionEvent;
}(BlockchainEvent));
exports.NFTAddedToCollectionEvent = NFTAddedToCollectionEvent;
/**
 * This class represents the on-chain CollectionCreatedEvent event.
 */
var CollectionCreatedEvent = /** @class */ (function (_super) {
    __extends(CollectionCreatedEvent, _super);
    /**
     * Construct the data object from the CollectionCreatedEvent event
     * @param event The CollectionCreatedEvent event
     */
    function CollectionCreatedEvent(event) {
        var _this = _super.call(this, event, EventType.CollectionCreated) || this;
        var _a = event.data, collectionId = _a[0], owner = _a[1], offchainData = _a[2], limit = _a[3];
        _this.collectionId = Number.parseInt(collectionId.toString());
        _this.owner = owner.toString();
        _this.limit = Number.parseInt(limit.toString()) || null;
        _this.offchainData = (0, util_1.hexToString)(offchainData.toString());
        return _this;
    }
    return CollectionCreatedEvent;
}(BlockchainEvent));
exports.CollectionCreatedEvent = CollectionCreatedEvent;
/**
 * This class represents the on-chain blockchain CollectionLimitedEvent event.
 */
var CollectionLimitedEvent = /** @class */ (function (_super) {
    __extends(CollectionLimitedEvent, _super);
    /**
     * Construct the data object from the CollectionLimitedEvent event
     * @param event The CollectionLimitedEvent event
     */
    function CollectionLimitedEvent(event) {
        var _this = _super.call(this, event, EventType.CollectionLimited) || this;
        var _a = event.data, collectionId = _a[0], limit = _a[1];
        _this.collectionId = Number.parseInt(collectionId.toString());
        _this.limit = Number.parseInt(limit.toString());
        return _this;
    }
    return CollectionLimitedEvent;
}(BlockchainEvent));
exports.CollectionLimitedEvent = CollectionLimitedEvent;
/**
 * This class represents the on-chain CollectionClosedEvent event.
 */
var CollectionClosedEvent = /** @class */ (function (_super) {
    __extends(CollectionClosedEvent, _super);
    /**
     * Construct the data object from theCollectionClosedEvent event
     * @param event The CollectionClosedEvent event
     */
    function CollectionClosedEvent(event) {
        var _this = _super.call(this, event, EventType.CollectionClosed) || this;
        var collectionId = event.data[0];
        _this.collectionId = Number.parseInt(collectionId.toString());
        return _this;
    }
    return CollectionClosedEvent;
}(BlockchainEvent));
exports.CollectionClosedEvent = CollectionClosedEvent;
/**
 * This class represents the on-chain CollectionBurnedEvent event.
 */
var CollectionBurnedEvent = /** @class */ (function (_super) {
    __extends(CollectionBurnedEvent, _super);
    /**
     * Construct the data object from the CollectionBurnedEvent event
     * @param event The CollectionBurnedEvent event
     */
    function CollectionBurnedEvent(event) {
        var _this = _super.call(this, event, EventType.CollectionBurned) || this;
        var collectionId = event.data[0];
        _this.collectionId = Number.parseInt(collectionId.toString());
        return _this;
    }
    return CollectionBurnedEvent;
}(BlockchainEvent));
exports.CollectionBurnedEvent = CollectionBurnedEvent;
/**
 * This class represents the on-chain CollectionBurnedEvent event.
 */
var CollectionOffchainDataSetEvent = /** @class */ (function (_super) {
    __extends(CollectionOffchainDataSetEvent, _super);
    /**
     * Construct the data object from the CollectionBurnedEvent event
     * @param event The CollectionBurnedEvent event
     */
    function CollectionOffchainDataSetEvent(event) {
        var _this = _super.call(this, event, EventType.CollectionOffchainDataSet) || this;
        var _a = event.data, collectionId = _a[0], offchainData = _a[1];
        _this.collectionId = Number.parseInt(collectionId.toString());
        _this.offchainData = (0, util_1.hexToString)(offchainData.toString());
        return _this;
    }
    return CollectionOffchainDataSetEvent;
}(BlockchainEvent));
exports.CollectionOffchainDataSetEvent = CollectionOffchainDataSetEvent;
/**
 * This class represents the on-chain NFTConvertedToCapsuleEvent event.
 */
var NFTConvertedToCapsuleEvent = /** @class */ (function (_super) {
    __extends(NFTConvertedToCapsuleEvent, _super);
    /**
     * Construct the data object from the NFTConvertedToCapsuleEvent event
     * @param event The NFTConvertedToCapsuleEvent event
     */
    function NFTConvertedToCapsuleEvent(event) {
        var _this = _super.call(this, event, EventType.NFTConvertedToCapsule) || this;
        var _a = event.data, nftId = _a[0], offchainData = _a[1];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.offchainData = (0, util_1.hexToString)(offchainData.toString());
        return _this;
    }
    return NFTConvertedToCapsuleEvent;
}(BlockchainEvent));
exports.NFTConvertedToCapsuleEvent = NFTConvertedToCapsuleEvent;
/**
 * This class represents the on-chain CapsuleOffchainDataSetEvent event.
 */
var CapsuleOffchainDataSetEvent = /** @class */ (function (_super) {
    __extends(CapsuleOffchainDataSetEvent, _super);
    /**
     * Construct the data object from the CapsuleOffchainDataSetEvent event
     * @param event The CapsuleOffchainDataSetEvent event
     */
    function CapsuleOffchainDataSetEvent(event) {
        var _this = _super.call(this, event, EventType.CapsuleOffchainDataSet) || this;
        var _a = event.data, nftId = _a[0], offchainData = _a[1];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.offchainData = (0, util_1.hexToString)(offchainData.toString());
        return _this;
    }
    return CapsuleOffchainDataSetEvent;
}(BlockchainEvent));
exports.CapsuleOffchainDataSetEvent = CapsuleOffchainDataSetEvent;
/**
 * This class represents the on-chain CapsuleKeyUpdateNotifiedEvent event.
 */
var CapsuleKeyUpdateNotifiedEvent = /** @class */ (function (_super) {
    __extends(CapsuleKeyUpdateNotifiedEvent, _super);
    /**
     * Construct the data object from the CapsuleKeyUpdateNotifiedEvent event
     * @param event The CapsuleKeyUpdateNotifiedEvent event
     */
    function CapsuleKeyUpdateNotifiedEvent(event) {
        var _this = _super.call(this, event, EventType.CapsuleKeyUpdateNotified) || this;
        var nftId = event.data[0];
        _this.nftId = Number.parseInt(nftId.toString());
        return _this;
    }
    return CapsuleKeyUpdateNotifiedEvent;
}(BlockchainEvent));
exports.CapsuleKeyUpdateNotifiedEvent = CapsuleKeyUpdateNotifiedEvent;
/**
 * This class represents the on-chain CapsuleRevertedEvent event.
 */
var CapsuleRevertedEvent = /** @class */ (function (_super) {
    __extends(CapsuleRevertedEvent, _super);
    /**
     * Construct the data object from the CapsuleRevertedEvent event
     * @param event The CapsuleRevertedEvent event
     */
    function CapsuleRevertedEvent(event) {
        var _this = _super.call(this, event, EventType.CapsuleReverted) || this;
        var nftId = event.data[0];
        _this.nftId = Number.parseInt(nftId.toString());
        return _this;
    }
    return CapsuleRevertedEvent;
}(BlockchainEvent));
exports.CapsuleRevertedEvent = CapsuleRevertedEvent;
/**
 * This class represents the on-chain ProtocolSetEvent event.
 */
var ProtocolSetEvent = /** @class */ (function (_super) {
    __extends(ProtocolSetEvent, _super);
    /**
     * Construct the data object from the ProtocolSetEvent event
     * @param event The ProtocolSetEvent event
     */
    function ProtocolSetEvent(event) {
        var _this = _super.call(this, event, EventType.ProtocolSet) || this;
        var _a = event.data, nftId = _a[0], recipient = _a[1], protocol = _a[2], cancellation = _a[3];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.recipient = recipient.toString();
        _this.protocol = protocol.toJSON();
        _this.cancellation = cancellation.toJSON();
        return _this;
    }
    return ProtocolSetEvent;
}(BlockchainEvent));
exports.ProtocolSetEvent = ProtocolSetEvent;
/**
 * This class represents the on-chain ProtocolRemovedEvent event.
 */
var ProtocolRemovedEvent = /** @class */ (function (_super) {
    __extends(ProtocolRemovedEvent, _super);
    /**
     * Construct the data object from the ProtocolRemovedEvent event
     * @param event The ProtocolRemovedEvent event
     */
    function ProtocolRemovedEvent(event) {
        var _this = _super.call(this, event, EventType.ProtocolRemoved) || this;
        var nftId = event.data[0];
        _this.nftId = Number.parseInt(nftId.toString());
        return _this;
    }
    return ProtocolRemovedEvent;
}(BlockchainEvent));
exports.ProtocolRemovedEvent = ProtocolRemovedEvent;
/**
 * This class represents the on-chain TimerResetEvent event.
 */
var TimerResetEvent = /** @class */ (function (_super) {
    __extends(TimerResetEvent, _super);
    /**
     * Construct the data object from the TimerResetEvent event
     * @param event The TimerResetEvent event
     */
    function TimerResetEvent(event) {
        var _this = _super.call(this, event, EventType.TimerReset) || this;
        var _a = event.data, nftId = _a[0], newBlockNumber = _a[1];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.newBlockNumber = Number.parseInt(newBlockNumber.toString());
        return _this;
    }
    return TimerResetEvent;
}(BlockchainEvent));
exports.TimerResetEvent = TimerResetEvent;
/**
 * This class represents the on-chain ConsentAddedEvent event.
 */
var ConsentAddedEvent = /** @class */ (function (_super) {
    __extends(ConsentAddedEvent, _super);
    /**
     * Construct the data object from the ConsentAddedEvent event
     * @param event The ConsentAddedEvent event
     */
    function ConsentAddedEvent(event) {
        var _this = _super.call(this, event, EventType.ConsentAdded) || this;
        var _a = event.data, nftId = _a[0], from = _a[1];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.from = from.toString();
        return _this;
    }
    return ConsentAddedEvent;
}(BlockchainEvent));
exports.ConsentAddedEvent = ConsentAddedEvent;
/**
 * This class represents the on-chain ThresholdReachedEvent event.
 */
var ThresholdReachedEvent = /** @class */ (function (_super) {
    __extends(ThresholdReachedEvent, _super);
    /**
     * Construct the data object from the ThresholdReachedEvent event
     * @param event The ThresholdReachedEvent event
     */
    function ThresholdReachedEvent(event) {
        var _this = _super.call(this, event, EventType.ThresholdReached) || this;
        var nftId = event.data[0];
        _this.nftId = Number.parseInt(nftId.toString());
        return _this;
    }
    return ThresholdReachedEvent;
}(BlockchainEvent));
exports.ThresholdReachedEvent = ThresholdReachedEvent;
/**
 * This class represents the on-chain TransmittedEvent event.
 */
var TransmittedEvent = /** @class */ (function (_super) {
    __extends(TransmittedEvent, _super);
    /**
     * Construct the data object from the TransmittedEvent event
     * @param event The TransmittedEvent event
     */
    function TransmittedEvent(event) {
        var _this = _super.call(this, event, EventType.Transmitted) || this;
        var nftId = event.data[0];
        _this.nftId = Number.parseInt(nftId.toString());
        return _this;
    }
    return TransmittedEvent;
}(BlockchainEvent));
exports.TransmittedEvent = TransmittedEvent;
/**
 * This class represents the on-chain MetricsServerReportSubmitted event.
 */
var MetricsServerReportSubmittedEvent = /** @class */ (function (_super) {
    __extends(MetricsServerReportSubmittedEvent, _super);
    /**
     * Construct the data object from the MetricsServerReportSubmittedEvent event
     * @param event The MetricsServerReportSubmittedEvent event
     */
    function MetricsServerReportSubmittedEvent(event) {
        var _this = _super.call(this, event, EventType.MetricsServerReportSubmitted) || this;
        var _a = event.data, era = _a[0], operatorAddress = _a[1], metricsServerReport = _a[2];
        _this.era = Number.parseInt(era.toString());
        _this.operatorAddress = operatorAddress.toString();
        _this.metricsServerReport = metricsServerReport.toJSON();
        return _this;
    }
    return MetricsServerReportSubmittedEvent;
}(BlockchainEvent));
exports.MetricsServerReportSubmittedEvent = MetricsServerReportSubmittedEvent;
/**
 * This class represents the on-chain RewardsClaimed event.
 */
var RewardsClaimedEvent = /** @class */ (function (_super) {
    __extends(RewardsClaimedEvent, _super);
    /**
     * Construct the data object from the RewardsClaimedEvent event
     * @param event The RewardsClaimedEvent event
     */
    function RewardsClaimedEvent(event) {
        var _this = _super.call(this, event, EventType.RewardsClaimed) || this;
        var _a = event.data, era = _a[0], operatorAddress = _a[1], amount = _a[2];
        _this.era = Number.parseInt(era.toString());
        _this.operatorAddress = operatorAddress.toString();
        _this.amount = (0, util_1.bnToBn)(amount.toString()).toString();
        _this.amountRounded = (0, utils_1.roundBalance)(_this.amount);
        return _this;
    }
    return RewardsClaimedEvent;
}(BlockchainEvent));
exports.RewardsClaimedEvent = RewardsClaimedEvent;
/**
 * This class represents the on-chain ContractCreatedEvent event.
 */
var ContractCreatedEvent = /** @class */ (function (_super) {
    __extends(ContractCreatedEvent, _super);
    /**
     * Construct the data object from the ContractCreatedEvent event
     * @param event The ContractCreatedEvent event
     */
    function ContractCreatedEvent(event) {
        var _a, _b, _c, _d;
        var _this = _super.call(this, event, EventType.ContractCreated) || this;
        var _e = event.data, nftId = _e[0], renter = _e[1], duration = _e[2], acceptanceType = _e[3], renterCanRevoke = _e[4], rentFee = _e[5], renterCancellationFee = _e[6], renteeCancellationFee = _e[7];
        var parsedDuration = JSON.parse(duration.toString());
        var parsedAcceptance = JSON.parse(acceptanceType.toString());
        var isAutoAcceptance = enum_2.AcceptanceAction.AutoAcceptance in parsedAcceptance;
        var parsedRentFee = JSON.parse(rentFee.toString());
        var isRentFeeToken = enum_2.RentFeeAction.Tokens in parsedRentFee;
        var parsedRenterCancellationFee = renterCancellationFee.toString() !== enum_2.CancellationFeeAction.None && JSON.parse(renterCancellationFee.toString());
        var parsedRenteeCancellationFee = renteeCancellationFee.toString() !== enum_2.CancellationFeeAction.None && JSON.parse(renteeCancellationFee.toString());
        _this.creationBlockId = 0;
        _this.nftId = Number.parseInt(nftId.toString());
        _this.renter = renter.toString();
        _this.duration = parsedDuration;
        _this.renterCanRevoke = renterCanRevoke.toString() === "true";
        if (isAutoAcceptance) {
            _this.acceptanceType = enum_2.AcceptanceAction.AutoAcceptance;
            _this.acceptanceList = (_b = (_a = parsedAcceptance.autoAcceptance) === null || _a === void 0 ? void 0 : _a.map(function (account) { return account; })) !== null && _b !== void 0 ? _b : [];
        }
        else {
            _this.acceptanceType = enum_2.AcceptanceAction.ManualAcceptance;
            _this.acceptanceList = (_d = (_c = parsedAcceptance.manualAcceptance) === null || _c === void 0 ? void 0 : _c.map(function (account) { return account; })) !== null && _d !== void 0 ? _d : [];
        }
        if (isRentFeeToken) {
            _this.rentFeeType = enum_2.RentFeeAction.Tokens;
            _this.rentFee = (0, util_1.bnToBn)(parsedRentFee[_this.rentFeeType]).toString();
            _this.rentFeeRounded = (0, utils_1.roundBalance)(_this.rentFee);
        }
        else {
            _this.rentFeeType = enum_2.RentFeeAction.NFT;
            _this.rentFee = Number.parseInt(parsedRentFee[_this.rentFeeType].toString());
            _this.rentFeeRounded = _this.rentFee;
        }
        switch (true) {
            case parsedRenterCancellationFee && enum_2.CancellationFeeAction.FixedTokens in parsedRenterCancellationFee:
                _this.renterCancellationFeeType = enum_2.CancellationFeeAction.FixedTokens;
                _this.renterCancellationFee = (0, util_1.bnToBn)(parsedRenterCancellationFee[_this.renterCancellationFeeType]).toString();
                _this.renterCancellationFeeRounded = (0, utils_1.roundBalance)(_this.renterCancellationFee);
                break;
            case parsedRenterCancellationFee && enum_2.CancellationFeeAction.FlexibleTokens in parsedRenterCancellationFee:
                _this.renterCancellationFeeType = enum_2.CancellationFeeAction.FlexibleTokens;
                _this.renterCancellationFee = (0, util_1.bnToBn)(parsedRenterCancellationFee[_this.renterCancellationFeeType]).toString();
                _this.renterCancellationFeeRounded = (0, utils_1.roundBalance)(_this.renterCancellationFee);
                break;
            case parsedRenterCancellationFee && enum_2.CancellationFeeAction.NFT in parsedRenterCancellationFee:
                _this.renterCancellationFeeType = enum_2.CancellationFeeAction.NFT;
                _this.renterCancellationFee = Number(parsedRenterCancellationFee[_this.renterCancellationFeeType]);
                _this.renterCancellationFeeRounded = _this.renterCancellationFee;
                break;
            default:
                _this.renterCancellationFeeType = enum_2.CancellationFeeAction.None;
                _this.renterCancellationFee = null;
                _this.renterCancellationFeeRounded = null;
                break;
        }
        switch (true) {
            case parsedRenteeCancellationFee && enum_2.CancellationFeeAction.FixedTokens in parsedRenteeCancellationFee:
                _this.renteeCancellationFeeType = enum_2.CancellationFeeAction.FixedTokens;
                _this.renteeCancellationFee = (0, util_1.bnToBn)(parsedRenteeCancellationFee[_this.renteeCancellationFeeType]).toString();
                _this.renteeCancellationFeeRounded = (0, utils_1.roundBalance)(_this.renteeCancellationFee);
                break;
            case parsedRenteeCancellationFee && enum_2.CancellationFeeAction.FlexibleTokens in parsedRenteeCancellationFee:
                _this.renteeCancellationFeeType = enum_2.CancellationFeeAction.FlexibleTokens;
                _this.renteeCancellationFee = (0, util_1.bnToBn)(parsedRenteeCancellationFee[_this.renteeCancellationFeeType]).toString();
                _this.renteeCancellationFeeRounded = (0, utils_1.roundBalance)(_this.renteeCancellationFee);
                break;
            case parsedRenteeCancellationFee && enum_2.CancellationFeeAction.NFT in parsedRenteeCancellationFee:
                _this.renteeCancellationFeeType = enum_2.CancellationFeeAction.NFT;
                _this.renteeCancellationFee = Number(parsedRenteeCancellationFee[_this.renteeCancellationFeeType]);
                _this.renteeCancellationFeeRounded = _this.renteeCancellationFee;
                break;
            default:
                _this.renteeCancellationFeeType = enum_2.CancellationFeeAction.None;
                _this.renteeCancellationFee = null;
                _this.renteeCancellationFeeRounded = null;
                break;
        }
        return _this;
    }
    return ContractCreatedEvent;
}(BlockchainEvent));
exports.ContractCreatedEvent = ContractCreatedEvent;
/**
 * This class represents the on-chain ContractCanceledEvent event.
 */
var ContractCanceledEvent = /** @class */ (function (_super) {
    __extends(ContractCanceledEvent, _super);
    /**
     * Construct the data object from the ContractCanceledEvent event
     * @param event The ContractCanceledEvent event
     */
    function ContractCanceledEvent(event) {
        var _this = _super.call(this, event, EventType.ContractCanceled) || this;
        var nftId = event.data[0];
        _this.nftId = Number.parseInt(nftId.toString());
        return _this;
    }
    return ContractCanceledEvent;
}(BlockchainEvent));
exports.ContractCanceledEvent = ContractCanceledEvent;
/**
 * This class represents the on-chain ContractStartedEvent event.
 */
var ContractStartedEvent = /** @class */ (function (_super) {
    __extends(ContractStartedEvent, _super);
    /**
     * Construct the data object from the ContractStartedEvent event
     * @param event The ContractStartedEvent event
     */
    function ContractStartedEvent(event) {
        var _this = _super.call(this, event, EventType.ContractStarted) || this;
        var _a = event.data, nftId = _a[0], rentee = _a[1];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.rentee = rentee.toString();
        return _this;
    }
    return ContractStartedEvent;
}(BlockchainEvent));
exports.ContractStartedEvent = ContractStartedEvent;
/**
 * This class represents the on-chain ContractRevokedEvent event.
 */
var ContractRevokedEvent = /** @class */ (function (_super) {
    __extends(ContractRevokedEvent, _super);
    /**
     * Construct the data object from the ContractRevokedEvent event
     * @param event The ContractRevokedEvent event
     */
    function ContractRevokedEvent(event) {
        var _this = _super.call(this, event, EventType.ContractRevoked) || this;
        var _a = event.data, nftId = _a[0], revokedBy = _a[1];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.revokedBy = revokedBy.toString();
        return _this;
    }
    return ContractRevokedEvent;
}(BlockchainEvent));
exports.ContractRevokedEvent = ContractRevokedEvent;
/**
 * This class represents the on-chain ContractOfferCreatedEvent event.
 */
var ContractOfferCreatedEvent = /** @class */ (function (_super) {
    __extends(ContractOfferCreatedEvent, _super);
    /**
     * Construct the data object from the ContractOfferCreatedEvent event
     * @param event The ContractOfferCreatedEvent event
     */
    function ContractOfferCreatedEvent(event) {
        var _this = _super.call(this, event, EventType.ContractOfferCreated) || this;
        var _a = event.data, nftId = _a[0], rentee = _a[1];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.rentee = rentee.toString();
        return _this;
    }
    return ContractOfferCreatedEvent;
}(BlockchainEvent));
exports.ContractOfferCreatedEvent = ContractOfferCreatedEvent;
/**
 * This class represents the on-chain ContractOfferRetractedEvent event.
 */
var ContractOfferRetractedEvent = /** @class */ (function (_super) {
    __extends(ContractOfferRetractedEvent, _super);
    /**
     * Construct the data object from the ContractOfferRetractedEvent event
     * @param event The ContractOfferRetractedEvent event
     */
    function ContractOfferRetractedEvent(event) {
        var _this = _super.call(this, event, EventType.ContractOfferRetracted) || this;
        var _a = event.data, nftId = _a[0], rentee = _a[1];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.rentee = rentee.toString();
        return _this;
    }
    return ContractOfferRetractedEvent;
}(BlockchainEvent));
exports.ContractOfferRetractedEvent = ContractOfferRetractedEvent;
/**
 * This class represents the on-chain ContractSubscriptionTermsChangedEvent event.
 */
var ContractSubscriptionTermsChangedEvent = /** @class */ (function (_super) {
    __extends(ContractSubscriptionTermsChangedEvent, _super);
    /**
     * Construct the data object from the ContractSubscriptionTermsChangedEvent event
     * @param event The ContractSubscriptionTermsChangedEvent event
     */
    function ContractSubscriptionTermsChangedEvent(event) {
        var _this = _super.call(this, event, EventType.ContractSubscriptionTermsChanged) || this;
        var _a = event.data, nftId = _a[0], period = _a[1], maxDuration = _a[2], isChangeable = _a[3], rentFee = _a[4];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.period = Number.parseInt(period.toString());
        _this.maxDuration = Number.parseInt(maxDuration.toString());
        _this.isChangeable = Boolean(isChangeable.toString() === "true");
        _this.rentFeeType = enum_2.RentFeeAction.Tokens;
        _this.rentFee = (0, util_1.bnToBn)(rentFee.toString()).toString();
        _this.rentFeeRounded = (0, utils_1.roundBalance)(_this.rentFee);
        return _this;
    }
    return ContractSubscriptionTermsChangedEvent;
}(BlockchainEvent));
exports.ContractSubscriptionTermsChangedEvent = ContractSubscriptionTermsChangedEvent;
/**
 * This class represents the on-chain ContractSubscriptionTermsAcceptedEvent event.
 */
var ContractSubscriptionTermsAcceptedEvent = /** @class */ (function (_super) {
    __extends(ContractSubscriptionTermsAcceptedEvent, _super);
    /**
     * Construct the data object from the ContractSubscriptionTermsAcceptedEvent event
     * @param event The ContractSubscriptionTermsAcceptedEvent event
     */
    function ContractSubscriptionTermsAcceptedEvent(event) {
        var _this = _super.call(this, event, EventType.ContractSubscriptionTermsAccepted) || this;
        var nftId = event.data[0];
        _this.nftId = Number.parseInt(nftId.toString());
        return _this;
    }
    return ContractSubscriptionTermsAcceptedEvent;
}(BlockchainEvent));
exports.ContractSubscriptionTermsAcceptedEvent = ContractSubscriptionTermsAcceptedEvent;
/**
 * This class represents the on-chain ContractEndedEvent event.
 */
var ContractEndedEvent = /** @class */ (function (_super) {
    __extends(ContractEndedEvent, _super);
    /**
     * Construct the data object from the ContractEndedEvent event
     * @param event The ContractEndedEvent event
     */
    function ContractEndedEvent(event) {
        var _this = _super.call(this, event, EventType.ContractEnded) || this;
        var _a = event.data, nftId = _a[0], revokedBy = _a[1];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.revokedBy = revokedBy.toString();
        return _this;
    }
    return ContractEndedEvent;
}(BlockchainEvent));
exports.ContractEndedEvent = ContractEndedEvent;
/**
 * This class represents the on-chain ContractSubscriptionPeriodStartedEvent event.
 */
var ContractSubscriptionPeriodStartedEvent = /** @class */ (function (_super) {
    __extends(ContractSubscriptionPeriodStartedEvent, _super);
    /**
     * Construct the data object from the ContractSubscriptionPeriodStartedEvent event
     * @param event The ContractSubscriptionPeriodStartedEvent event
     */
    function ContractSubscriptionPeriodStartedEvent(event) {
        var _this = _super.call(this, event, EventType.ContractSubscriptionPeriodStarted) || this;
        var nftId = event.data[0];
        _this.nftId = Number.parseInt(nftId.toString());
        return _this;
    }
    return ContractSubscriptionPeriodStartedEvent;
}(BlockchainEvent));
exports.ContractSubscriptionPeriodStartedEvent = ContractSubscriptionPeriodStartedEvent;
/**
 * This class represents the on-chain ContractExpiredEvent event.
 */
var ContractExpiredEvent = /** @class */ (function (_super) {
    __extends(ContractExpiredEvent, _super);
    /**
     * Construct the data object from the ContractExpiredEvent event
     * @param event The ContractExpiredEvent event
     */
    function ContractExpiredEvent(event) {
        var _this = _super.call(this, event, EventType.ContractExpired) || this;
        var nftId = event.data[0];
        _this.nftId = Number.parseInt(nftId.toString());
        return _this;
    }
    return ContractExpiredEvent;
}(BlockchainEvent));
exports.ContractExpiredEvent = ContractExpiredEvent;
/**
 * This class represents the on-chain MarketplaceCreatedEvent event.
 */
var MarketplaceCreatedEvent = /** @class */ (function (_super) {
    __extends(MarketplaceCreatedEvent, _super);
    /**
     * Construct the data object from MarketplaceCreatedEvent event
     * @param event The MarketplaceCreatedEvent event
     */
    function MarketplaceCreatedEvent(event) {
        var _this = _super.call(this, event, EventType.MarketplaceCreated) || this;
        _this.marketplaceId = Number.parseInt(event.data[0].toString());
        _this.owner = event.data[1].toString();
        _this.kind = event.data[2].toString() == "Public" ? enum_1.MarketplaceKind.Public : enum_1.MarketplaceKind.Private;
        return _this;
    }
    return MarketplaceCreatedEvent;
}(BlockchainEvent));
exports.MarketplaceCreatedEvent = MarketplaceCreatedEvent;
/**
 * This class represents the on-chain MarketplaceConfigSetEvent event.
 */
var MarketplaceConfigSetEvent = /** @class */ (function (_super) {
    __extends(MarketplaceConfigSetEvent, _super);
    /**
     * Construct the data object from MarketplaceConfigSetEvent event
     * @param event The MarketplaceConfigSetEvent event
     */
    function MarketplaceConfigSetEvent(event) {
        var _this = _super.call(this, event, EventType.MarketplaceConfigSet) || this;
        var _a = event.data, marketplaceId = _a[0], commissionFee = _a[1], listingFee = _a[2], accountList = _a[3], offchainData = _a[4], collectionList = _a[5];
        var isCommissionFeeSet = commissionFee.toString() !== "Noop" && commissionFee.toString() !== "Remove";
        var isCommissionFeeRemoved = commissionFee.toString() === "Remove";
        var isListingFeeSet = listingFee.toString() !== "Noop" && listingFee.toString() !== "Remove";
        var isListingFeeRemoved = listingFee.toString() === "Remove";
        var isAccountListSet = accountList.toString() !== "Noop" && accountList.toString() !== "Remove";
        var isAccountListRemoved = accountList.toString() === "Remove";
        var isOffchainDataSet = offchainData.toString() !== "Noop" && offchainData.toString() !== "Remove";
        var isOffchainDataRemoved = offchainData.toString() === "Remove";
        var isCollectionListSet = collectionList.toString() !== "Noop" && collectionList.toString() !== "Remove";
        var isCollectionListRemoved = collectionList.toString() === "Remove";
        _this.marketplaceId = Number.parseInt(marketplaceId.toString());
        _this.commissionFeeType = undefined;
        _this.commissionFee = undefined;
        _this.commissionFeeRounded = undefined;
        _this.listingFeeType = undefined;
        _this.listingFee = undefined;
        _this.listingFeeRounded = undefined;
        _this.accountList = undefined;
        _this.offchainData = undefined;
        _this.collectionList = undefined;
        if (isCommissionFeeSet) {
            var parsedDatas = JSON.parse(commissionFee.toString());
            parsedDatas.set.flat
                ? ((_this.commissionFee = (0, util_1.bnToBn)(parsedDatas.set.flat).toString()),
                    (_this.commissionFeeRounded = (0, utils_1.roundBalance)(_this.commissionFee)),
                    (_this.commissionFeeType = enum_1.MarketplaceConfigFeeType.Flat))
                : ((_this.commissionFee = String(Number(parsedDatas.set.percentage.toString()) / 10000)),
                    (_this.commissionFeeRounded = Number(_this.commissionFee)),
                    (_this.commissionFeeType = enum_1.MarketplaceConfigFeeType.Percentage));
        }
        else if (isCommissionFeeRemoved) {
            _this.commissionFee = null;
            _this.commissionFeeRounded = null;
            _this.commissionFeeType = null;
        }
        if (isListingFeeSet) {
            var parsedDatas = JSON.parse(listingFee.toString());
            parsedDatas.set.flat
                ? ((_this.listingFee = (0, util_1.bnToBn)(parsedDatas.set.flat).toString()),
                    (_this.listingFeeRounded = (0, utils_1.roundBalance)(_this.listingFee)),
                    (_this.listingFeeType = enum_1.MarketplaceConfigFeeType.Flat))
                : ((_this.listingFee = String(Number(parsedDatas.set.percentage.toString()) / 10000)),
                    (_this.listingFeeRounded = Number(_this.listingFee)),
                    (_this.listingFeeType = enum_1.MarketplaceConfigFeeType.Percentage));
        }
        else if (isListingFeeRemoved) {
            _this.listingFee = null;
            _this.listingFeeRounded = null;
            _this.listingFeeType = null;
        }
        if (isAccountListSet) {
            _this.accountList = [];
            var parsedDatas = JSON.parse(accountList.toString());
            parsedDatas.set.map(function (account) { var _a; return (_a = _this.accountList) === null || _a === void 0 ? void 0 : _a.push(account.toString()); });
        }
        else if (isAccountListRemoved) {
            _this.accountList = [];
        }
        if (isOffchainDataSet) {
            var parsedDatas = JSON.parse(offchainData.toString());
            _this.offchainData = (0, util_1.hexToString)(parsedDatas.set.toString());
        }
        else if (isOffchainDataRemoved) {
            _this.offchainData = null;
        }
        if (isCollectionListSet) {
            _this.collectionList = [];
            var parsedDatas = JSON.parse(collectionList.toString());
            parsedDatas.set.map(function (collection) { var _a; return (_a = _this.collectionList) === null || _a === void 0 ? void 0 : _a.push(collection); });
        }
        else if (isCollectionListRemoved) {
            _this.collectionList = [];
        }
        return _this;
    }
    return MarketplaceConfigSetEvent;
}(BlockchainEvent));
exports.MarketplaceConfigSetEvent = MarketplaceConfigSetEvent;
/**
 * This class represents the on-chain MarketplaceOwnerSetEvent event.
 */
var MarketplaceOwnerSetEvent = /** @class */ (function (_super) {
    __extends(MarketplaceOwnerSetEvent, _super);
    /**
     * Construct the data object from MarketplaceOwnerSetEvent event
     * @param event The MarketplaceOwnerSetEvent event
     */
    function MarketplaceOwnerSetEvent(event) {
        var _this = _super.call(this, event, EventType.MarketplaceOwnerSet) || this;
        var _a = event.data, marketplaceId = _a[0], owner = _a[1];
        _this.marketplaceId = Number.parseInt(marketplaceId.toString());
        _this.owner = owner.toString();
        return _this;
    }
    return MarketplaceOwnerSetEvent;
}(BlockchainEvent));
exports.MarketplaceOwnerSetEvent = MarketplaceOwnerSetEvent;
/**
 * This class represents the on-chain MarketplaceKindSetEvent event.
 */
var MarketplaceKindSetEvent = /** @class */ (function (_super) {
    __extends(MarketplaceKindSetEvent, _super);
    /**
     * Construct the data object from MarketplaceKindSetEvent event
     * @param event The MarketplaceKindSetEvent event
     */
    function MarketplaceKindSetEvent(event) {
        var _this = _super.call(this, event, EventType.MarketplaceKindSet) || this;
        var _a = event.data, marketplaceId = _a[0], kind = _a[1];
        _this.marketplaceId = Number.parseInt(marketplaceId.toString());
        _this.kind = kind.toString() == "Public" ? enum_1.MarketplaceKind.Public : enum_1.MarketplaceKind.Private;
        return _this;
    }
    return MarketplaceKindSetEvent;
}(BlockchainEvent));
exports.MarketplaceKindSetEvent = MarketplaceKindSetEvent;
/**
 * This class represents the on-chain MarketplaceMintFeeSetEvent event.
 */
var MarketplaceMintFeeSetEvent = /** @class */ (function (_super) {
    __extends(MarketplaceMintFeeSetEvent, _super);
    /**
     * Construct the data object from MarketplaceMintFeeSetEvent event
     * @param event The MarketplaceMintFeeSetEvent event
     */
    function MarketplaceMintFeeSetEvent(event) {
        var _this = _super.call(this, event, EventType.MarketplaceMintFeeSet) || this;
        var fee = event.data[0];
        _this.fee = fee.toString();
        _this.feeRounded = (0, utils_1.roundBalance)(_this.fee);
        return _this;
    }
    return MarketplaceMintFeeSetEvent;
}(BlockchainEvent));
exports.MarketplaceMintFeeSetEvent = MarketplaceMintFeeSetEvent;
/**
 * This class represents the on-chain NFTListedEvent event.
 */
var NFTListedEvent = /** @class */ (function (_super) {
    __extends(NFTListedEvent, _super);
    /**
     * Construct the data object from NFTListedEvent event
     * @param event The NFTListedEvent event
     */
    function NFTListedEvent(event) {
        var _this = _super.call(this, event, EventType.NFTListed) || this;
        var _a = event.data, nftId = _a[0], marketplaceId = _a[1], price = _a[2], commissionFee = _a[3];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.marketplaceId = Number.parseInt(marketplaceId.toString());
        _this.price = price.toString();
        _this.priceRounded = (0, utils_1.roundBalance)(_this.price);
        _this.commissionFeeType = undefined;
        _this.commissionFee = undefined;
        _this.commissionFeeRounded = undefined;
        var parsedCommissionFee = commissionFee.toString() && JSON.parse(commissionFee.toString());
        var isMarketplaceCommissionFeeFlat = parsedCommissionFee && parsedCommissionFee.flat;
        var isMarketplaceCommissionFeePercentage = parsedCommissionFee && parsedCommissionFee.percentage;
        if (isMarketplaceCommissionFeeFlat) {
            _this.commissionFeeType = enum_1.MarketplaceConfigFeeType.Flat;
            _this.commissionFee = (0, util_1.bnToBn)(parsedCommissionFee.flat).toString();
            _this.commissionFeeRounded = (0, utils_1.roundBalance)(_this.commissionFee);
        }
        else if (isMarketplaceCommissionFeePercentage) {
            _this.commissionFeeType = enum_1.MarketplaceConfigFeeType.Percentage;
            _this.commissionFee = String(Number(parsedCommissionFee.percentage.toString()) / 10000);
            _this.commissionFeeRounded = Number(_this.commissionFee);
        }
        return _this;
    }
    return NFTListedEvent;
}(BlockchainEvent));
exports.NFTListedEvent = NFTListedEvent;
/**
 * This class represents the on-chain NFTUnlistedEvent event.
 */
var NFTUnlistedEvent = /** @class */ (function (_super) {
    __extends(NFTUnlistedEvent, _super);
    /**
     * Construct the data object from NFTUnlistedEvent event
     * @param event The NFTUnlistedEvent event
     */
    function NFTUnlistedEvent(event) {
        var _this = _super.call(this, event, EventType.NFTUnlisted) || this;
        var nftId = event.data[0];
        _this.nftId = Number.parseInt(nftId.toString());
        return _this;
    }
    return NFTUnlistedEvent;
}(BlockchainEvent));
exports.NFTUnlistedEvent = NFTUnlistedEvent;
/**
 * This class represents the on-chain NFTSoldEvent event.
 */
var NFTSoldEvent = /** @class */ (function (_super) {
    __extends(NFTSoldEvent, _super);
    /**
     * Construct the data object from NFTSoldEvent event
     * @param event The NFTSoldEvent event
     */
    function NFTSoldEvent(event) {
        var _this = _super.call(this, event, EventType.NFTSold) || this;
        var _a = event.data, nftId = _a[0], marketplaceId = _a[1], buyer = _a[2], listedPrice = _a[3], marketplaceCut = _a[4], royaltyCut = _a[5];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.marketplaceId = Number.parseInt(marketplaceId.toString());
        _this.buyer = buyer.toString();
        _this.listedPrice = listedPrice.toString();
        _this.listedPriceRounded = (0, utils_1.roundBalance)(_this.listedPrice);
        _this.marketplaceCut = marketplaceCut.toString();
        _this.marketplaceCutRounded = (0, utils_1.roundBalance)(_this.marketplaceCut);
        _this.royaltyCut = royaltyCut.toString();
        _this.royaltyCutRounded = (0, utils_1.roundBalance)(_this.royaltyCut);
        return _this;
    }
    return NFTSoldEvent;
}(BlockchainEvent));
exports.NFTSoldEvent = NFTSoldEvent;
/**
 * This class represents the on-chain AuctionCreatedEvent event.
 */
var AuctionCreatedEvent = /** @class */ (function (_super) {
    __extends(AuctionCreatedEvent, _super);
    /**
     * Construct the data object from the AuctionCreatedEvent event
     * @param event The AuctionCreatedEvent event
     */
    function AuctionCreatedEvent(event) {
        var _this = _super.call(this, event, EventType.AuctionCreated) || this;
        var _a = event.data, nftId = _a[0], marketplaceId = _a[1], creator = _a[2], startPrice = _a[3], buyItPrice = _a[4], startBlockId = _a[5], endBlockId = _a[6];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.marketplaceId = Number.parseInt(marketplaceId.toString());
        _this.creator = creator.toString();
        _this.startPrice = startPrice.toString();
        _this.startPriceRounded = (0, utils_1.roundBalance)(_this.startPrice);
        _this.buyItPrice = buyItPrice.toString();
        _this.buyItPriceRounded = (0, utils_1.roundBalance)(_this.buyItPrice);
        _this.startBlock = Number.parseInt(startBlockId.toString());
        _this.endBlock = Number.parseInt(endBlockId.toString());
        return _this;
    }
    return AuctionCreatedEvent;
}(BlockchainEvent));
exports.AuctionCreatedEvent = AuctionCreatedEvent;
/**
 * This class represents the on-chain AuctionCancelledEvent event.
 */
var AuctionCancelledEvent = /** @class */ (function (_super) {
    __extends(AuctionCancelledEvent, _super);
    /**
     * Construct the data object from the AuctionCancelledEvent event
     * @param event The AuctionCancelledEvent event
     */
    function AuctionCancelledEvent(event) {
        var _this = _super.call(this, event, EventType.AuctionCancelled) || this;
        var nftId = event.data[0];
        _this.nftId = Number.parseInt(nftId.toString());
        return _this;
    }
    return AuctionCancelledEvent;
}(BlockchainEvent));
exports.AuctionCancelledEvent = AuctionCancelledEvent;
/**
 * This class represents the on-chain AuctionCompleted event.
 */
var AuctionCompletedEvent = /** @class */ (function (_super) {
    __extends(AuctionCompletedEvent, _super);
    /**
     * Construct the data object from the AuctionCompleted event
     * @param event The AuctionCompleted event
     */
    function AuctionCompletedEvent(event) {
        var _this = _super.call(this, event, EventType.AuctionCompleted) || this;
        var _a = event.data, nftId = _a[0], newOwner = _a[1], amount = _a[2], marketplaceCut = _a[3], royaltyCut = _a[4];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.newOwner = newOwner.toString();
        _this.amount = amount.toString();
        _this.amountRounded = (0, utils_1.roundBalance)(_this.amount);
        _this.marketplaceCut = marketplaceCut.toString();
        _this.marketplaceCutRounded = (0, utils_1.roundBalance)(_this.marketplaceCut);
        _this.royaltyCut = royaltyCut.toString();
        _this.royaltyCutRounded = (0, utils_1.roundBalance)(_this.royaltyCut);
        return _this;
    }
    return AuctionCompletedEvent;
}(BlockchainEvent));
exports.AuctionCompletedEvent = AuctionCompletedEvent;
/**
 * This class represents the on-chain BidAdded event.
 */
var BidAddedEvent = /** @class */ (function (_super) {
    __extends(BidAddedEvent, _super);
    /**
     * Construct the data object from the BidAdded event
     * @param event The BidAdded event
     */
    function BidAddedEvent(event) {
        var _this = _super.call(this, event, EventType.BidAdded) || this;
        var _a = event.data, nftId = _a[0], bidder = _a[1], amount = _a[2];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.bidder = bidder.toString();
        _this.amount = amount.toString();
        _this.amountRounded = (0, utils_1.roundBalance)(_this.amount);
        return _this;
    }
    return BidAddedEvent;
}(BlockchainEvent));
exports.BidAddedEvent = BidAddedEvent;
/**
 * This class represents the on-chain BidRemoved event.
 */
var BidRemovedEvent = /** @class */ (function (_super) {
    __extends(BidRemovedEvent, _super);
    /**
     * Construct the data object from the BidRemoved event
     * @param event The BidRemoved event
     */
    function BidRemovedEvent(event) {
        var _this = _super.call(this, event, EventType.BidRemoved) || this;
        var _a = event.data, nftId = _a[0], bidder = _a[1], amount = _a[2];
        _this.nftId = Number.parseInt(nftId.toString());
        _this.bidder = bidder.toString();
        _this.amount = amount.toString();
        _this.amountRounded = (0, utils_1.roundBalance)(_this.amount);
        return _this;
    }
    return BidRemovedEvent;
}(BlockchainEvent));
exports.BidRemovedEvent = BidRemovedEvent;
/**
 * This class represents the on-chain BalanceClaimed event.
 */
var BalanceClaimedEvent = /** @class */ (function (_super) {
    __extends(BalanceClaimedEvent, _super);
    /**
     * Construct the data object from the BalanceClaimed event
     * @param event The BalanceClaimed event
     */
    function BalanceClaimedEvent(event) {
        var _this = _super.call(this, event, EventType.BalanceClaimed) || this;
        var _a = event.data, account = _a[0], amount = _a[1];
        _this.account = account.toString();
        _this.amount = amount.toString();
        _this.amountRounded = (0, utils_1.roundBalance)(_this.amount);
        return _this;
    }
    return BalanceClaimedEvent;
}(BlockchainEvent));
exports.BalanceClaimedEvent = BalanceClaimedEvent;
/**
 * This class represents the on-chain ItemCompletedEvent event,
 * when a single item within a Batch of dispatches has completed with no error.
 */
var ItemCompletedEvent = /** @class */ (function (_super) {
    __extends(ItemCompletedEvent, _super);
    /**
     * Construct the data object from the ItemCompletedEvent event
     * @param event The ItemCompletedEvent event
     */
    function ItemCompletedEvent(event) {
        return _super.call(this, event, EventType.ItemCompleted) || this;
        // This is an empty event.
    }
    return ItemCompletedEvent;
}(BlockchainEvent));
exports.ItemCompletedEvent = ItemCompletedEvent;
/**
 * This class represents the on-chain ItemFailedEvent event,
 * when a single item within a Batch of dispatches has completed with error. .
 */
var ItemFailedEvent = /** @class */ (function (_super) {
    __extends(ItemFailedEvent, _super);
    /**
     * Construct the data object from the ItemFailedEvent event
     * @param event The ItemFailedEvent event
     */
    function ItemFailedEvent(event) {
        var _this = _super.call(this, event, EventType.ItemFailed) || this;
        var error = event.data[0];
        _this.error = error.toJSON();
        var errorNumber = parseInt(_this.error.module.error.slice(2, 4), 16); // parse firsts 2 bytes of dispatchError.module.error using 16 base to get the error number and error message from substrate registry.
        var _a = error.registry.findMetaError({
            index: new bn_js_1.default(_this.error.module.index),
            error: new bn_js_1.default(errorNumber),
        }), docs = _a.docs, name = _a.name;
        _this.errorType = name;
        _this.errorDetails = docs.join(" ");
        return _this;
    }
    return ItemFailedEvent;
}(BlockchainEvent));
exports.ItemFailedEvent = ItemFailedEvent;
/**
 * This class represents the on-chain BatchInterruptedEvent event,
 * when a batch of dispatches did not complete fully.
 */
var BatchInterruptedEvent = /** @class */ (function (_super) {
    __extends(BatchInterruptedEvent, _super);
    /**
     * Construct the data object from the BatchInterruptedEvent event
     * @param event The BatchInterruptedEvent event
     */
    function BatchInterruptedEvent(event) {
        var _this = _super.call(this, event, EventType.BatchInterrupted) || this;
        var _a = event.data, index = _a[0], dispatchError = _a[1];
        _this.index = Number.parseInt(index.toString());
        _this.dispatchError = dispatchError.toJSON();
        var errorNumber = parseInt(_this.dispatchError.module.error.slice(2, 4), 16); // parse firsts 2 bytes of dipatchError.module.error using 16 base to get the error number and error message from substrate registry.
        var _b = dispatchError.registry.findMetaError({
            index: new bn_js_1.default(_this.dispatchError.module.index),
            error: new bn_js_1.default(errorNumber),
        }), docs = _b.docs, name = _b.name;
        _this.errorType = name;
        _this.details = docs.join(" ");
        return _this;
    }
    return BatchInterruptedEvent;
}(BlockchainEvent));
exports.BatchInterruptedEvent = BatchInterruptedEvent;
/**
 * This class represents the on-chain BatchCompletedWithErrorsEvent event,
 * when a batch of dispatches completed but has errors.
 */
var BatchCompletedWithErrorsEvent = /** @class */ (function (_super) {
    __extends(BatchCompletedWithErrorsEvent, _super);
    /**
     * Construct the data object from the BatchCompletedWithErrorsEvent event
     * @param event The BatchCompletedWithErrorsEvent event
     */
    function BatchCompletedWithErrorsEvent(event) {
        return _super.call(this, event, EventType.BatchCompletedWithErrors) || this;
        // This is an empty event.
    }
    return BatchCompletedWithErrorsEvent;
}(BlockchainEvent));
exports.BatchCompletedWithErrorsEvent = BatchCompletedWithErrorsEvent;
/**
 * This class represents the on-chain BatchInterruptedEvent event,
 * when a batch of dispatches completed fully with no error.
 */
var BatchCompletedEvent = /** @class */ (function (_super) {
    __extends(BatchCompletedEvent, _super);
    /**
     * Construct the data object from the BatchCompletedEvent event
     * @param event The BatchCompletedEvent event
     */
    function BatchCompletedEvent(event) {
        return _super.call(this, event, EventType.BatchCompleted) || this;
        // This is an empty event.
    }
    return BatchCompletedEvent;
}(BlockchainEvent));
exports.BatchCompletedEvent = BatchCompletedEvent;
/**
 * This class represents the on-chain ExtrinsicFailedEvent event,
 * when an extrinsic failed.
 */
var ExtrinsicFailedEvent = /** @class */ (function (_super) {
    __extends(ExtrinsicFailedEvent, _super);
    /**
     * Construct the data object from the ExtrinsicFailedEvent event
     * @param event The ExtrinsicFailedEvent event
     */
    function ExtrinsicFailedEvent(event) {
        var _this = _super.call(this, event, EventType.ExtrinsicFailed) || this;
        var _a = event.data, dispatchError = _a[0], dispatchInfo = _a[1];
        _this.dispatchError = dispatchError.toJSON();
        var errorNumber = parseInt(_this.dispatchError.module.error.slice(2, 4), 16); // parse firsts 2 bytes of dispatchError.module.error using 16 base to get the error number and error message from substrate registery.
        var _b = dispatchError.registry.findMetaError({
            index: new bn_js_1.default(_this.dispatchError.module.index),
            error: new bn_js_1.default(errorNumber),
        }), docs = _b.docs, name = _b.name;
        _this.errorType = name;
        _this.details = docs.join(" ");
        _this.dispatchInfo = dispatchInfo === null || dispatchInfo === void 0 ? void 0 : dispatchInfo.toJSON();
        return _this;
    }
    return ExtrinsicFailedEvent;
}(BlockchainEvent));
exports.ExtrinsicFailedEvent = ExtrinsicFailedEvent;
/**
 * This class represents the on-chain ExtrinsicSuccessEvent event,
 * when an extrinsic completed successfully.
 */
var ExtrinsicSuccessEvent = /** @class */ (function (_super) {
    __extends(ExtrinsicSuccessEvent, _super);
    /**
     * Construct the data object from the ExtrinsicSuccessEvent event
     * @param event The ExtrinsicSuccessEvent event
     */
    function ExtrinsicSuccessEvent(event) {
        var _this = _super.call(this, event, EventType.ExtrinsicSuccess) || this;
        var dispatchInfo = event.data[0];
        _this.dispatchInfo = dispatchInfo.toJSON();
        return _this;
    }
    return ExtrinsicSuccessEvent;
}(BlockchainEvent));
exports.ExtrinsicSuccessEvent = ExtrinsicSuccessEvent;
/**
 * This class represents the on-chain NewAccountEvent event,
 * when a new account was created.
 */
var NewAccountEvent = /** @class */ (function (_super) {
    __extends(NewAccountEvent, _super);
    /**
     * Construct the data object from the NewAccountEvent event
     * @param event The NewAccountEvent event
     */
    function NewAccountEvent(event) {
        var _this = _super.call(this, event, EventType.NewAccount) || this;
        var account = event.data[0];
        _this.account = account.toString();
        return _this;
    }
    return NewAccountEvent;
}(BlockchainEvent));
exports.NewAccountEvent = NewAccountEvent;
/**
 * This class represents the on-chain UnknownEvent event,
 */
var UnknownEvent = /** @class */ (function (_super) {
    __extends(UnknownEvent, _super);
    /**
     * Construct the data object from UnknownEvent event
     * @param event The UnknownEvent event
     */
    function UnknownEvent(event) {
        return _super.call(this, event, EventType.Unknown) || this;
        // This is an empty event.
    }
    return UnknownEvent;
}(BlockchainEvent));
exports.UnknownEvent = UnknownEvent;
var BlockchainEvents = /** @class */ (function () {
    function BlockchainEvents(events) {
        this.inner = events;
    }
    BlockchainEvents.prototype.findEvents = function (ctor) {
        var events = this.inner.filter(function (event) { return event instanceof ctor; });
        return events;
    };
    BlockchainEvents.prototype.findEvent = function (ctor) {
        var maybeEvent = this.inner.find(function (event) { return event instanceof ctor; });
        return maybeEvent ? maybeEvent : undefined;
    };
    BlockchainEvents.prototype.findEventOrThrow = function (ctor) {
        var failedEvent = this.inner.find(function (event) { return event.type == EventType.ExtrinsicFailed; });
        var targetEvent = this.inner.find(function (event) { return event instanceof ctor; });
        if (failedEvent) {
            throw new Error("".concat(constants_1.Errors.EXTRINSIC_FAILED, " : ").concat(failedEvent.errorType, " - ").concat(failedEvent.details));
        }
        if (targetEvent == undefined) {
            throw new Error(constants_1.Errors.EVENT_NOT_FOUND);
        }
        return targetEvent;
    };
    return BlockchainEvents;
}());
exports.BlockchainEvents = BlockchainEvents;
