"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addConsentToOnConsentProtocol = exports.addConsentToOnConsentProtocolTx = exports.resetTransmissionProtocolTimer = exports.resetTransmissionProtocolTimerTx = exports.removeTransmissionProtocol = exports.removeTransmissionProtocolTx = exports.setTransmissionProtocol = exports.setTransmissionProtocolTx = void 0;
var events_1 = require("../events");
var blockchain_1 = require("../blockchain");
var constants_1 = require("../constants");
/**
 * @name setTransmissionProtocolTx
 * @summary    		              Creates an unsigned unsubmittedSet-Transmission-Protocol Transaction Hash.
 * @param nftId		              The NFT Id to add transmission protocol.
 * @param recipient            	The destination account.
 * @param protocol 	            The transmission protocol to execute.
 * @param protocolCancellation 	the cancellation period of the transmission protocol.
 * @returns  		                Unsigned unsubmitted Set-Transmission-Protocol Transaction Hash. The Hash is only valid for 5 minutes.
 */
var setTransmissionProtocolTx = function (nftId, recipient, protocol, protocolCancellation) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.createTxHex)(constants_1.txPallets.transmissionProtocols, constants_1.txActions.setTransmissionProtocol, [
                    nftId,
                    recipient,
                    protocol,
                    protocolCancellation,
                ])];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.setTransmissionProtocolTx = setTransmissionProtocolTx;
/**
 * @name setTransmissionProtocol
 * @summary    		              Adds a transmission protocol to any type of NFT.
 * @param nftId		              The NFT Id to add transmission protocol.
 * @param recipient            	The destination account.
 * @param protocol 	            The transmission protocol to execute.
 * @param protocolCancellation 	the cancellation period of the transmission protocol.
 * @param keyring               Account that will sign the transaction.
 * @param waitUntil             Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns  		                ProtocolSetEvent Blockchain event.
 */
var setTransmissionProtocol = function (nftId, recipient, protocol, protocolCancellation, keyring, waitUntil) { return __awaiter(void 0, void 0, void 0, function () {
    var tx, events;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.setTransmissionProtocolTx)(nftId, recipient, protocol, protocolCancellation)];
            case 1:
                tx = _a.sent();
                return [4 /*yield*/, (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring)];
            case 2:
                events = (_a.sent()).events;
                return [2 /*return*/, events.findEventOrThrow(events_1.ProtocolSetEvent)];
        }
    });
}); };
exports.setTransmissionProtocol = setTransmissionProtocol;
/**
 * @name removeTransmissionProtocolTx
 * @summary    		               Creates an unsigned unsubmitted Remove-Transmission-Protocol Transaction Hash for a transmission protocol.
 * @param nftId		               The NFT Id to remove the transmission protocol.
 * @returns  		                 Unsigned unsubmitted Remove-Transmission-Protocol Transaction Hash. The Hash is only valid for 5 minutes.
 */
var removeTransmissionProtocolTx = function (nftId) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.createTxHex)(constants_1.txPallets.transmissionProtocols, constants_1.txActions.removeTransmissionProtocol, [nftId])];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.removeTransmissionProtocolTx = removeTransmissionProtocolTx;
/**
 * @name removeTransmissionProtocol
 * @summary    		               Removes a transmission protocol from an NFT.
 * @param nftId		               The NFT Id to remove the transmission protocol.
 * @param keyring                Account that will sign the transaction.
 * @param waitUntil              Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns  		                 ProtocolRemovedEvent Blockchain event.
 */
var removeTransmissionProtocol = function (nftId, keyring, waitUntil) { return __awaiter(void 0, void 0, void 0, function () {
    var tx, events;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.removeTransmissionProtocolTx)(nftId)];
            case 1:
                tx = _a.sent();
                return [4 /*yield*/, (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring)];
            case 2:
                events = (_a.sent()).events;
                return [2 /*return*/, events.findEventOrThrow(events_1.ProtocolRemovedEvent)];
        }
    });
}); };
exports.removeTransmissionProtocol = removeTransmissionProtocol;
/**
 * @name resetTransmissionProtocolTimerTx
 * @summary    		                Creates an unsigned unsubmitted Reset-Timer Transaction Hash for an AtBlockWithReset protocol.
 * @param nftId		                The NFT Id to reset the timer for an AtBlockWithReset protocol.
 * @param blockNumber 	          The new blockNumber to execute the AtBlockWithReset protocol.
 * @returns  		                  Unsigned unsubmitted Reset-Timer Transaction Hash. The Hash is only valid for 5 minutes.
 */
var resetTransmissionProtocolTimerTx = function (nftId, blockNumber) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.createTxHex)(constants_1.txPallets.transmissionProtocols, constants_1.txActions.resetTimer, [nftId, blockNumber])];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.resetTransmissionProtocolTimerTx = resetTransmissionProtocolTimerTx;
/**
 * @name resetTransmissionProtocolTimer
 * @summary    		                Resets the block execution of the transmission protocol.
 * @param nftId		                The NFT Id to remove the transmission protocol.
 * @param blockNumber 	          The new blockNumber to execute the AtBlockWithReset protocol.
 * @param keyring                 Account that will sign the transaction.
 * @param waitUntil               Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns  		                  TimerResetEvent Blockchain event.
 */
var resetTransmissionProtocolTimer = function (nftId, blockNumber, keyring, waitUntil) { return __awaiter(void 0, void 0, void 0, function () {
    var tx, events;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.resetTransmissionProtocolTimerTx)(nftId, blockNumber)];
            case 1:
                tx = _a.sent();
                return [4 /*yield*/, (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring)];
            case 2:
                events = (_a.sent()).events;
                return [2 /*return*/, events.findEventOrThrow(events_1.TimerResetEvent)];
        }
    });
}); };
exports.resetTransmissionProtocolTimer = resetTransmissionProtocolTimer;
/**
 * @name addConsentToOnConsentProtocolTx
 * @summary    		                Creates an unsigned unsubmitted Add-Consent Transaction Hash for an OnConsent protocol.
 * @param nftId		                The NFT Id expecting consent to be added by user.
 * @returns  		                  Unsigned unsubmitted Add-Consent Transaction Hash. The Hash is only valid for 5 minutes.
 */
var addConsentToOnConsentProtocolTx = function (nftId) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.createTxHex)(constants_1.txPallets.transmissionProtocols, constants_1.txActions.addConsent, [nftId])];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.addConsentToOnConsentProtocolTx = addConsentToOnConsentProtocolTx;
/**
 * @name addConsentToOnConsentProtocol
 * @summary    		                Adds user consent to transmit the NFT (for users specified in the account list for OnConsent protocol only)
 * @param nftId		                The NFT Id expecting consent to be added by user.
 * @param keyring                 Account that will sign the transaction.
 * @param waitUntil               Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns  		                  ConsentAddedEvent Blockchain event.
 */
var addConsentToOnConsentProtocol = function (nftId, keyring, waitUntil) { return __awaiter(void 0, void 0, void 0, function () {
    var tx, events;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.addConsentToOnConsentProtocolTx)(nftId)];
            case 1:
                tx = _a.sent();
                return [4 /*yield*/, (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring)];
            case 2:
                events = (_a.sent()).events;
                return [2 /*return*/, events.findEventOrThrow(events_1.ConsentAddedEvent)];
        }
    });
}); };
exports.addConsentToOnConsentProtocol = addConsentToOnConsentProtocol;
