"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClaimableBidBalance = exports.getAuctionDeadline = exports.getAuctionData = void 0;
var util_1 = require("@polkadot/util");
var utils_1 = require("../helpers/utils");
var blockchain_1 = require("../blockchain");
var constants_1 = require("../constants");
/**
 * @name getAuctionData
 * @summary       Provides the data related to an auction.
 * @param nftId   The ID of the Auctioned  NFT.
 * @returns       A JSON object with the auction data.
 */
var getAuctionData = function (nftId) { return __awaiter(void 0, void 0, void 0, function () {
    var data, _a, creator, startBlock, endBlock, startPrice, buyItPrice, bidders, marketplaceId, isExtended, startPriceAmount, buyItPriceAmount, startPriceRounded, buyItPriceRounded, formattedBidders, auction;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.query)(constants_1.txPallets.auction, constants_1.chainQuery.auctions, [nftId])];
            case 1:
                data = _b.sent();
                if (data.isEmpty) {
                    return [2 /*return*/, null];
                }
                try {
                    _a = data.toJSON(), creator = _a.creator, startBlock = _a.startBlock, endBlock = _a.endBlock, startPrice = _a.startPrice, buyItPrice = _a.buyItPrice, bidders = _a.bidders, marketplaceId = _a.marketplaceId, isExtended = _a.isExtended;
                    startPriceAmount = (0, util_1.bnToBn)(startPrice).toString();
                    buyItPriceAmount = buyItPrice && (0, util_1.bnToBn)(buyItPrice).toString();
                    startPriceRounded = (0, utils_1.roundBalance)(startPriceAmount);
                    buyItPriceRounded = buyItPriceAmount !== null ? (0, utils_1.roundBalance)(buyItPriceAmount) : buyItPriceAmount;
                    formattedBidders = bidders.list.map(function (bidder) {
                        var address = bidder[0], bid = bidder[1];
                        var amount = (0, util_1.bnToBn)(bid).toString();
                        var amountRounded = (0, utils_1.roundBalance)(amount);
                        return {
                            bidder: address,
                            amount: amount,
                            amountRounded: amountRounded,
                        };
                    });
                    auction = {
                        creator: creator,
                        startBlock: startBlock,
                        endBlock: endBlock,
                        startPrice: startPriceAmount,
                        startPriceRounded: startPriceRounded,
                        buyItPrice: buyItPriceAmount,
                        buyItPriceRounded: buyItPriceRounded,
                        bidders: formattedBidders,
                        marketplaceId: marketplaceId,
                        isExtended: isExtended,
                    };
                    return [2 /*return*/, auction];
                }
                catch (error) {
                    throw new Error("".concat(constants_1.Errors.AUCTION_NFT_CONVERSION_ERROR));
                }
                return [2 /*return*/];
        }
    });
}); };
exports.getAuctionData = getAuctionData;
/**
 * @name getAuctionDeadline
 * @summary       Provides the auction ending block.
 * @param nftId   The ID of the Auctioned  NFT.
 * @returns       Number.
 */
var getAuctionDeadline = function (nftId) { return __awaiter(void 0, void 0, void 0, function () {
    var data, endBlock;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.query)(constants_1.txPallets.auction, constants_1.chainQuery.auctions, [nftId])];
            case 1:
                data = _a.sent();
                if (data.isEmpty) {
                    return [2 /*return*/, null];
                }
                endBlock = data.toJSON().endBlock;
                return [2 /*return*/, endBlock];
        }
    });
}); };
exports.getAuctionDeadline = getAuctionDeadline;
/**
 * @name getClaimableBidBalance
 * @summary         Bids balance claimable after an auction ends.
 * @param address   The bidder address.
 * @returns         Number.
 */
var getClaimableBidBalance = function (address) { return __awaiter(void 0, void 0, void 0, function () {
    var data, parsedData, claimable, claimableRounded;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.query)(constants_1.txPallets.auction, constants_1.chainQuery.claims, [address])];
            case 1:
                data = _a.sent();
                parsedData = data.toJSON();
                claimable = (0, util_1.bnToBn)(parsedData).toString();
                claimableRounded = (0, utils_1.roundBalance)(claimable);
                return [2 /*return*/, {
                        claimable: claimable,
                        claimableRounded: claimableRounded,
                    }];
        }
    });
}); };
exports.getClaimableBidBalance = getClaimableBidBalance;
