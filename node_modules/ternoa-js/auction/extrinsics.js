"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.claim = exports.claimTx = exports.buyItNow = exports.buyItNowTx = exports.removeBid = exports.removeBidTx = exports.addBid = exports.addBidTx = exports.endAuction = exports.endAuctionTx = exports.cancelAuction = exports.cancelAuctionTx = exports.createAuction = exports.createAuctionTx = void 0;
var blockchain_1 = require("../blockchain");
var constants_1 = require("../constants");
var events_1 = require("../events");
/**
 * @name createAuctionTx
 * @summary               Creates an auction for an NFT.
 * @param nftId           The ID of the NFT.
 * @param marketplaceId   The ID of the marketplace where the auction will take place.
 * @param startBlock      The ID of the block at which the auction starts.
 * @param endBlock        The ID of the block at which the auction ends.
 * @param startPrice      The price at which the auction starts.
 * @param buyItPrice      The price to directly buy the NFT before the auction starts. Optional Parameter.
 * @returns               Unsigned unsubmitted Create-Auction Transaction Hash. The Hash is only valid for 5 minutes.
 */
var createAuctionTx = function (nftId, marketplaceId, startBlock, endBlock, startPrice, buyItPrice) {
    if (buyItPrice === void 0) { buyItPrice = undefined; }
    return __awaiter(void 0, void 0, void 0, function () {
        var formattedStartPrice, formattedBuyItPrice;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    formattedStartPrice = typeof startPrice === "number" ? (0, blockchain_1.numberToBalance)(startPrice) : startPrice;
                    formattedBuyItPrice = typeof buyItPrice === "number" ? (0, blockchain_1.numberToBalance)(buyItPrice) : buyItPrice;
                    return [4 /*yield*/, (0, blockchain_1.createTxHex)(constants_1.txPallets.auction, constants_1.txActions.createAuction, [
                            nftId,
                            marketplaceId,
                            startBlock,
                            endBlock,
                            formattedStartPrice,
                            formattedBuyItPrice,
                        ])];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
};
exports.createAuctionTx = createAuctionTx;
/**
 * @name createAuction
 * @summary               Creates an auction for an NFT.
 * @param nftId           The ID of the NFT.
 * @param marketplaceId   The ID of the marketplace where the auction will take place.
 * @param startBlock      The ID of the block at which the auction starts.
 * @param endBlock        The ID of the block at which the auction ends.
 * @param startPrice      The price at which the auction starts.
 * @param buyItPrice      The price to directly buy the NFT before the auction starts. Optional Parameter.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               AuctionCreatedEvent Blockchain event.
 */
var createAuction = function (nftId, marketplaceId, startBlock, endBlock, startPrice, buyItPrice, keyring, waitUntil) {
    if (buyItPrice === void 0) { buyItPrice = undefined; }
    return __awaiter(void 0, void 0, void 0, function () {
        var tx, events;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, exports.createAuctionTx)(nftId, marketplaceId, startBlock, endBlock, startPrice, buyItPrice)];
                case 1:
                    tx = _a.sent();
                    return [4 /*yield*/, (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring)];
                case 2:
                    events = (_a.sent()).events;
                    return [2 /*return*/, events.findEventOrThrow(events_1.AuctionCreatedEvent)];
            }
        });
    });
};
exports.createAuction = createAuction;
/**
 * @name cancelAuctionTx
 * @summary       Cancels an auction for an NFT. This transaction can only be submitted if the auction has not started yet.
 * @param nftId   The ID of the NFT.
 * @returns       Unsigned unsubmitted Cancel-Auction Transaction Hash. The Hash is only valid for 5 minutes.
 */
var cancelAuctionTx = function (nftId) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.createTxHex)(constants_1.txPallets.auction, constants_1.txActions.cancelAuction, [nftId])];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.cancelAuctionTx = cancelAuctionTx;
/**
 * @name cancelAuction
 * @summary               Cancels an auction for an NFT.
 * @param nftId           The ID of the NFT.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               AuctionCancelledEvent Blockchain event.
 */
var cancelAuction = function (nftId, keyring, waitUntil) { return __awaiter(void 0, void 0, void 0, function () {
    var tx, events;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.cancelAuctionTx)(nftId)];
            case 1:
                tx = _a.sent();
                return [4 /*yield*/, (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring)];
            case 2:
                events = (_a.sent()).events;
                return [2 /*return*/, events.findEventOrThrow(events_1.AuctionCancelledEvent)];
        }
    });
}); };
exports.cancelAuction = cancelAuction;
/**
 * @name endAuctionTx
 * @summary       Ends an auction for an NFT. This transaction can only be submitted if the auction has entered the ending period.
 * @param nftId   The ID of the NFT.
 * @returns       Unsigned unsubmitted End-Auction Transaction Hash. The Hash is only valid for 5 minutes.
 */
var endAuctionTx = function (nftId) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.createTxHex)(constants_1.txPallets.auction, constants_1.txActions.endAuction, [nftId])];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.endAuctionTx = endAuctionTx;
/**
 * @name endAuction
 * @summary               Ends an auction for an NFT
 * @param nftId           The ID of the NFT.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               AuctionCompletedEvent Blockchain event.
 */
var endAuction = function (nftId, keyring, waitUntil) { return __awaiter(void 0, void 0, void 0, function () {
    var tx, events;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.endAuctionTx)(nftId)];
            case 1:
                tx = _a.sent();
                return [4 /*yield*/, (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring)];
            case 2:
                events = (_a.sent()).events;
                return [2 /*return*/, events.findEventOrThrow(events_1.AuctionCompletedEvent)];
        }
    });
}); };
exports.endAuction = endAuction;
/**
 * @name addBidTx
 * @summary       The bidder adds a new bid offer.
 * @param nftId   The ID of the NFT.
 * @param amount  The new bid added.
 * @returns       Unsigned unsubmitted Add-Bid Transaction Hash. The Hash is only valid for 5 minutes.
 */
var addBidTx = function (nftId, amount) { return __awaiter(void 0, void 0, void 0, function () {
    var formattedAmount;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                formattedAmount = typeof amount === "number" ? (0, blockchain_1.numberToBalance)(amount) : amount;
                return [4 /*yield*/, (0, blockchain_1.createTxHex)(constants_1.txPallets.auction, constants_1.txActions.addBid, [nftId, formattedAmount])];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.addBidTx = addBidTx;
/**
 * @name addBid
 * @summary               The bidder adds a new bid offer.
 * @param nftId           The ID of the NFT.
 * @param amount          The new bid added.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               BidAddedEvent Blockchain event.
 */
var addBid = function (nftId, amount, keyring, waitUntil) { return __awaiter(void 0, void 0, void 0, function () {
    var tx, events;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.addBidTx)(nftId, amount)];
            case 1:
                tx = _a.sent();
                return [4 /*yield*/, (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring)];
            case 2:
                events = (_a.sent()).events;
                return [2 /*return*/, events.findEventOrThrow(events_1.BidAddedEvent)];
        }
    });
}); };
exports.addBid = addBid;
/**
 * @name removeBidTx
 * @summary       The bidder removes his bid offer.
 * @param nftId   The ID of the NFT.
 * @returns       Unsigned unsubmitted Remove-Bid Transaction Hash. The Hash is only valid for 5 minutes.
 */
var removeBidTx = function (nftId) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.createTxHex)(constants_1.txPallets.auction, constants_1.txActions.removeBid, [nftId])];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.removeBidTx = removeBidTx;
/**
 * @name removeBid
 * @summary               The bidder removes his bid offer.
 * @param nftId           The ID of the NFT.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               BidRemovedEvent Blockchain event.
 */
var removeBid = function (nftId, keyring, waitUntil) { return __awaiter(void 0, void 0, void 0, function () {
    var tx, events;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.removeBidTx)(nftId)];
            case 1:
                tx = _a.sent();
                return [4 /*yield*/, (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring)];
            case 2:
                events = (_a.sent()).events;
                return [2 /*return*/, events.findEventOrThrow(events_1.BidRemovedEvent)];
        }
    });
}); };
exports.removeBid = removeBid;
/**
 * @name buyItNowTx
 * @summary               The NFT can be directly buy if a buyItPrice was defined and the auction has not started yet.
 * @param nftId           The ID of the NFT.
 * @param nftBuyingPrice  The NFT buying price signed.
 * @returns               Unsigned unsubmitted Buy-It-Now Transaction Hash. The Hash is only valid for 5 minutes.
 */
var buyItNowTx = function (nftId, nftBuyingPrice) { return __awaiter(void 0, void 0, void 0, function () {
    var formattedNftBuyingPrice;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                formattedNftBuyingPrice = typeof nftBuyingPrice === "number" ? (0, blockchain_1.numberToBalance)(nftBuyingPrice) : nftBuyingPrice;
                return [4 /*yield*/, (0, blockchain_1.createTxHex)(constants_1.txPallets.auction, constants_1.txActions.buyItNow, [nftId, formattedNftBuyingPrice])];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.buyItNowTx = buyItNowTx;
/**
 * @name buyItNow
 * @summary               The NFT can be directly buy if a buyItPrice was defined and the auction has not started yet.
 * @param nftId           The ID of the NFT.
 * @param nftBuyingPrice  The NFT buying price signed.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               AuctionCompletedEvent Blockchain event.
 */
var buyItNow = function (nftId, nftBuyingPrice, keyring, waitUntil) { return __awaiter(void 0, void 0, void 0, function () {
    var tx, events;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.buyItNowTx)(nftId, nftBuyingPrice)];
            case 1:
                tx = _a.sent();
                return [4 /*yield*/, (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring)];
            case 2:
                events = (_a.sent()).events;
                return [2 /*return*/, events.findEventOrThrow(events_1.AuctionCompletedEvent)];
        }
    });
}); };
exports.buyItNow = buyItNow;
/**
 * @name claimTx
 * @summary   Bidders that did not win the auction have to claim back their bids balance after an auction ends.
 * @returns   Unsigned unsubmitted Buy-It-Now Transaction Hash. The Hash is only valid for 5 minutes.
 */
var claimTx = function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, blockchain_1.createTxHex)(constants_1.txPallets.auction, constants_1.txActions.claim)];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
exports.claimTx = claimTx;
/**
 * @name claim
 * @summary               Bidders that did not win the auction have to claim back their bids balance after an auction ends.
 * @param keyring         Account that will sign the transaction.
 * @param waitUntil       Execution trigger that can be set either to BlockInclusion or BlockFinalization.
 * @returns               BalanceClaimedEvent Blockchain event.
 */
var claim = function (keyring, waitUntil) { return __awaiter(void 0, void 0, void 0, function () {
    var tx, events;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, exports.claimTx)()];
            case 1:
                tx = _a.sent();
                return [4 /*yield*/, (0, blockchain_1.submitTxBlocking)(tx, waitUntil, keyring)];
            case 2:
                events = (_a.sent()).events;
                return [2 /*return*/, events.findEventOrThrow(events_1.BalanceClaimedEvent)];
        }
    });
}); };
exports.claim = claim;
